#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef KLARNACORE_SWIFT_H
#define KLARNACORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSBundle;
@class NSCoder;
/// Fullscreen view controller which should contain resized / enlarged klarna payment view
SWIFT_CLASS("_TtC10KlarnaCore24FullscreenViewController")
@interface FullscreenViewController : UIViewController
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;
@class WKNavigation;
@class NSURL;
@class NSNotification;
@class WKWebViewConfiguration;
/// This is the internal web view class that we use everywhere.
SWIFT_CLASS("_TtC10KlarnaCore15InternalWebView")
@interface InternalWebView : WKWebView
/// <code>InternalWebView</code> should not be initialized from storyboard or xib files.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (WKNavigation * _Nullable)loadRequest:(NSURLRequest * _Nonnull)request;
- (WKNavigation * _Nullable)loadHTMLString:(NSString * _Nonnull)string baseURL:(NSURL * _Nullable)baseURL;
/// <ul>
///   <li>
///     Listen to nofications on “text selection” events. This is an internal NSNotification.
///   </li>
///   <li>
///     If we have a parent scroll view and our own scrolling is disabled, scroll the parent to the right location.
///   </li>
///   <li>
///     We do this by finding the little caret element and then its position respective to the parent scroll view.
///   </li>
/// </ul>
- (void)textSelectionDidZoomWithNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillChangeWithNotification:(NSNotification * _Nonnull)notification;
- (void)layoutWebViewContent;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end

@class UIScrollView;
@interface InternalWebView (SWIFT_EXTENSION(KlarnaCore)) <UIScrollViewDelegate>
/// <ul>
///   <li>
///     Ignore scrolling that we trigger ourselves within this method.
///   </li>
///   <li>
///     Reset scroll offset insde web view if WKWebView does some scrolling.
///   </li>
/// </ul>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end

@class WKNavigationAction;
@class WKWindowFeatures;
@class WKSecurityOrigin;
@class WKFrameInfo;
@interface InternalWebView (SWIFT_EXTENSION(KlarnaCore)) <WKUIDelegate>
/// Called when trying to open a new tab/window i.e. target=”_blank”
- (WKWebView * _Nullable)webView:(WKWebView * _Nonnull)webView createWebViewWithConfiguration:(WKWebViewConfiguration * _Nonnull)configuration forNavigationAction:(WKNavigationAction * _Nonnull)navigationAction windowFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
- (void)webView:(WKWebView * _Nonnull)webView requestMediaCapturePermissionForOrigin:(WKSecurityOrigin * _Nonnull)origin initiatedByFrame:(WKFrameInfo * _Nonnull)frame type:(WKMediaCaptureType)type decisionHandler:(void (^ _Nonnull)(WKPermissionDecision))decisionHandler SWIFT_AVAILABILITY(ios,introduced=15.0);
- (void)webViewDidClose:(WKWebView * _Nonnull)webView;
@end

@class WKNavigationResponse;
@interface InternalWebView (SWIFT_EXTENSION(KlarnaCore)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationResponse:(WKNavigationResponse * _Nonnull)navigationResponse decisionHandler:(void (^ _Nonnull)(WKNavigationResponsePolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, KlarnaButtonLabel, open) {
/// Show the default text.
  KlarnaButtonLabelKlarnaProduct = 0,
/// Will render the button only with the Klarna logo.
  KlarnaButtonLabelKlarna = 1,
};

typedef SWIFT_ENUM(NSInteger, KlarnaButtonShape, open) {
/// Set the button as a rectangle with rounded corners.
  KlarnaButtonShapeRoundedRect = 0,
/// Set the button as a pill shaped button.
  KlarnaButtonShapePill = 1,
/// set the button as a rectangle with square corners.
  KlarnaButtonShapeRectangle = 2,
};

typedef SWIFT_ENUM(NSInteger, KlarnaButtonStyle, open) {
  KlarnaButtonStyleFilled = 0,
  KlarnaButtonStyleOutlined = 1,
};

typedef SWIFT_ENUM(NSInteger, KlarnaButtonTheme, open) {
/// This is no longer supported, thus will render the default theme.
  KlarnaButtonThemeKlarna = 0,
/// Will render the button in white. It is recommended to use this theme on dark backgrounds.
  KlarnaButtonThemeLight = 1,
/// Will render the button in black. It is recommended to use this theme on light backgrounds.
  KlarnaButtonThemeDark = 2,
/// Will render the button based on the device theme.
  KlarnaButtonThemeAuto = 3,
};

/// Options to be sent to Klarna Checkout on initialization.
SWIFT_CLASS("_TtC10KlarnaCore21KlarnaCheckoutOptions")
@interface KlarnaCheckoutOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KlarnaRegion;
@class KlarnaEnvironment;
@class KlarnaResourceEndpoint;
enum KlarnaTheme : NSInteger;
@protocol KlarnaEventHandler;
enum KlarnaLoggingLevel : NSInteger;
/// General class that envelops any Klarna Component, regardless of integration.
SWIFT_PROTOCOL("_TtP10KlarnaCore15KlarnaComponent_")
@protocol KlarnaComponent
/// A schema (and optionally some path) defined in your app’s <code>Info.plist</code>, under <code>URLTypes</code> (aka
/// <code>CFBundleURLTypes</code>) to ensure that customers get returned back to your app if they need to
/// leave it for any reason.
/// This schema is used in flows where the customer needs to be directed to an external app (for
/// example if they need to authenticate with their bank). Klarna uses the value that you provided to
/// configure third-party app flows so that when they’re complete, customers get automatically returned
/// back to your app.
/// warning:
/// Make sure that the app schema you provide doesn’t trigger any navigations when
/// called.
/// warning:
/// Not setting this (either through this property or some other initializer) can be very
/// detrimental to the customers’ user experience (and hence conversion).
@property (nonatomic, copy) NSURL * _Nullable returnURL;
/// Geographic region that the SDK performs requests to. If not supplied, it may trigger an error or
/// default to using <code>KlarnaRegion/eu</code> internally.
/// Set this to a different value during intialization if you operate in an alternate region.
/// warning:
/// Setting it <em>after</em> a Klarna component is rendered may not have any effect.
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
/// Environment or “mode” that this SDK runs in. If not set, may trigger an error or default to using
/// <code>KlarnaEnvironment/production</code> internally.
/// Set this during initialization if you want the SDK to run in demo or playground mode.
/// warning:
/// Setting it <em>after</em> a Klarna component is rendered may not have any effect.
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
/// Determines what endpoints to fetch resources and perform requests from. Defaults to
/// <code>KlarnaResourceEndpoint/alternative1</code>.
/// warning:
/// Don’t change unless explicitly discussed with Klarna.
/// warning:
/// Setting <em>after</em> a Klarna component is rendered may not have any effect.
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
/// Theme to render this component with. Defaults to <code>KlarnaTheme/light</code>.
/// Set this value <em>before</em> the view (or web view) that you’re rendering Klarna’s conent in actually
/// renders said content.
/// warning:
/// Setting this value <em>after</em> content is loaded might not have any effect.
@property (nonatomic) enum KlarnaTheme theme;
/// Event handler to set to receive events and errors from Klarna components.
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
/// Determines the amount of logging being performed by the SDK. Defaults to <code>KlarnaLoggingLevel/error</code>.
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
/// Product(s) being rendered in this component.
/// In most standalone integrations, this value will be equal to a a single product. For example, if you’re
/// rendering a <code>KlarnaPaymentView</code>, this value will just be equal to <code>KlarnaProduct/payments</code>.
/// Integrations that can potentially render multiple products (for example using
/// <code>KlarnaStandaloneWebView</code>) can have different values:
/// <ul>
///   <li>
///     <code>KlarnaProduct/none</code> when the SDK doesn’t see any product running.
///   </li>
///   <li>
///     <code>.<product></code> when it sees a single product.
///   </li>
///   <li>
///     <code>[.<product1>, .<product2>]</code> when it sees multiple running at the same time.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@end

/// This is an event that describes something that occurred internally within the SDK, which can be used
/// to debug espcially complex problems.
SWIFT_CLASS("_TtC10KlarnaCore16KlarnaDebugEvent")
@interface KlarnaDebugEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Implement this interface to receive information about events internal to the SDK.
/// This is not necessary in most cases. We might ask you to implement this and log the events somewhere
/// if we identify an otherwise undebuggable problem in the SDK.
/// warning:
/// This method is called <em>a lot</em>. This means that you should <em>absolutely never</em> log events
/// sent through this to the network. It’ll burn through your users’ data.
SWIFT_PROTOCOL("_TtP10KlarnaCore24KlarnaDebugEventDelegate_")
@protocol KlarnaDebugEventDelegate
/// A given Klarna component has relayed an event to your delegate.
- (void)klarnaComponent:(id <KlarnaComponent> _Nonnull)klarnaComponent relayedEvent:(KlarnaDebugEvent * _Nonnull)event;
@end

/// Type of debug event that is being logged.
typedef SWIFT_ENUM(NSInteger, KlarnaDebugEventType, open) {
  KlarnaDebugEventTypeLog = 0,
  KlarnaDebugEventTypeNetwork = 1,
  KlarnaDebugEventTypeMessage = 2,
};

/// Configures the “mode” that the SDK should run in.
/// The environment determines the endpoints the SDK makes requests to, how it behaves (e.g., what kinds
/// of validation are perfomed) as well as customizing other aspects of how it runs.
SWIFT_CLASS("_TtC10KlarnaCore17KlarnaEnvironment")
@interface KlarnaEnvironment : NSObject
/// Run in a “demo” mode where no (or minimal) API requests are performed.
/// Content is static, not localized, and tokens, API keys and other identifiiers are not validated at all.
/// This is useful to test if the SDK works during integration, before you have access to any tokens or
/// keys, or if you want to run UI tests that aren’t fully end-to-end.
/// warning:
/// Not supported for all integrations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaEnvironment * _Nonnull demo;)
+ (KlarnaEnvironment * _Nonnull)demo SWIFT_WARN_UNUSED_RESULT;
/// The SDK will perform requests against playground endpoints, where not real money/orders/etc.
/// are being handled.
/// Some backend validation is in place, while other fields could be ignored e.g: the backend may
/// check that an address is real, but might not do the same checks about a customer.
/// warning:
/// Make sure that you’re using playground merchant IDs / tokens / keys etc, or the
/// integration might not work.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaEnvironment * _Nonnull playground;)
+ (KlarnaEnvironment * _Nonnull)playground SWIFT_WARN_UNUSED_RESULT;
/// The SDK will perform requests against production endpoints, where real full validation and orders
/// take place.
/// This is the default value in all integrations.
/// warning:
/// Make sure that you’re using production merchant IDs / tokens / etc, or the
/// integration might not work.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaEnvironment * _Nonnull production;)
+ (KlarnaEnvironment * _Nonnull)production SWIFT_WARN_UNUSED_RESULT;
/// The SDK uses this environment in Klarna-internal integrations to make requests to staging
/// environments.
/// warning:
/// Do not use this unless running against Klarna’s internal testing environments.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaEnvironment * _Nonnull staging;)
+ (KlarnaEnvironment * _Nonnull)staging SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describes a generic error that occurred within the SDK.
SWIFT_CLASS("_TtC10KlarnaCore11KlarnaError")
@interface KlarnaError : NSObject
/// Unique name identifying this error.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Describes whether this error is fatal. This means some part of the flow failed permanently.
@property (nonatomic, readonly) BOOL isFatal;
/// SDK’s session ID
@property (nonatomic, readonly, copy) NSString * _Nullable sessionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// Function available only for objc
- (NSDictionary<NSString *, NSString *> * _Nullable)getParams SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents an event that was sent by a component.
SWIFT_CLASS("_TtC10KlarnaCore11KlarnaEvent") SWIFT_DEPRECATED_MSG("Use KlarnaProductEvent through eventHandler instead.")
@interface KlarnaEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable bodyString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KlarnaProductEvent;
/// Interface to an object that gets notfied of key events happening to a product in a Klarna component.
/// Most integrations offer dedicated delegates/handlers with concrete methods that you can implement –
/// but there’s cases when an SDK renders multiple products and/or the events are too varied or generic to
/// provide you with a specialized API. This is for those cases.
/// If you want to receive events from the SDK:
/// <ul>
///   <li>
///     Implement this protocol.
///   </li>
///   <li>
///     Set it on the component’s <code>KlarnaComponent/eventHandler</code>.
///   </li>
///   <li>
///     Observe for the events that you’re interested in.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP10KlarnaCore18KlarnaEventHandler_")
@protocol KlarnaEventHandler
/// An event happened within a Klarna component.
/// \param klarnaComponent The component that the event came from.
///
/// \param event The event itself.
///
- (void)klarnaComponent:(id <KlarnaComponent> _Nonnull)klarnaComponent dispatchedEvent:(KlarnaProductEvent * _Nonnull)event;
/// An error occured within a Klarna component.
/// \param klarnaComponent The component that the error came from.
///
/// \param error The error that was encountered.
///
- (void)klarnaComponent:(id <KlarnaComponent> _Nonnull)klarnaComponent encounteredError:(KlarnaError * _Nonnull)error;
@end

/// Represents an event listener used in several Klarna components.
/// warning:
/// Deprecated, implement <code>KlarnaEventHandler</code> and set it as the component’s
/// <code>eventHandler</code> instead.
SWIFT_PROTOCOL("_TtP10KlarnaCore19KlarnaEventListener_") SWIFT_DEPRECATED_MSG("Use KlarnaEventHandler instead")
@protocol KlarnaEventListener
/// Called when Klarna’s<code>UIView</code> has received event signals.
/// \param view instance of the UIView class that received this signal.
///
/// \param event Event name as an identifier string.
///
/// \param params Parameters of the event as a dictionary.
///
- (void)klarnaComponent:(id <KlarnaComponent> _Nonnull)view didReceiveEvent:(NSString * _Nonnull)event params:(NSDictionary<NSString *, id> * _Nonnull)params;
/// Called when Klarna’s<code>UIView</code> has received an error signal.
/// \param view instance of the UIView class that received this signal.
///
/// \param error details of the error received such as name, message etc.
///
- (void)klarnaComponent:(id <KlarnaComponent> _Nonnull)view didReceiveError:(KlarnaError * _Nonnull)error;
@end

/// Level of logging to system console.
typedef SWIFT_ENUM(NSInteger, KlarnaLoggingLevel, open) {
/// No logging will occur.
  KlarnaLoggingLevelOff = 0,
/// Errors will be logged. Default.
  KlarnaLoggingLevelError = 1,
/// All messages will be logged.
  KlarnaLoggingLevelVerbose = 2,
};

/// The top level interface for the SDK and all of its components.
/// Common methods for all integrations are provided here.
SWIFT_CLASS("_TtC10KlarnaCore21KlarnaMobileSDKCommon")
@interface KlarnaMobileSDKCommon : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set logging level for all SDK integrations.
/// You can observe these logs either through XCode or the MacOS console.
/// The default logging level is <code>error</code>.
/// \param loggingLevel Console log output level.
///
+ (void)setLoggingLevel:(enum KlarnaLoggingLevel)loggingLevel SWIFT_DEPRECATED_MSG("Set logging level at per-component level instead.");
/// Provides a device identifier for an app.
/// The string it returns remains constant during the app’s lifetime on the app. The value does
/// not change on updates, but will change on re-installs.
/// The string is a UUID following the RFC 4122 version 4 standard.
///
/// returns:
/// A unique persisted ID string.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Do not use. May be eventually removed.");
@end

@class KlarnaProductOptions;
/// Components conforming to this interface protocol may render multiple products at once.
SWIFT_PROTOCOL("_TtP10KlarnaCore20KlarnaMultiComponent_")
@protocol KlarnaMultiComponent <KlarnaComponent>
/// Determines the products that the SDK will enhance to work in the app. Defaults to <code>KlarnaProduct/all</code>,
/// Use this property to signal to products to <em>not</em> use the SDK.
/// warning:
/// Some Klarna products may ignore this flag.
/// warning:
/// Setting this to a single product or <code>KlarnaProduct/none</code> may cause
/// integrations to <em>not work properly</em>. Use this only if you want specific products to <em>not</em> be
/// enhanced by the SDK and only if agreed with Klarna.
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull enabledProducts;
/// Sends an event to a given Klarna product.
/// Use this in cases when you don’t have a dedicated API to operate on a specific Klarna product.
/// warning:
/// Events are not buffered or persisted. If you send an event to a product that is not
/// ready to receive messages, it will be lost. Check that the product is loaded by looking at the
/// <code>KlarnaComponent/products</code> property.
- (void)sendEvent:(KlarnaProductEvent * _Nonnull)event;
/// These are startup options for specific products loaded in a web view that the SDK operates on.
@property (nonatomic, readonly, strong) KlarnaProductOptions * _Nonnull productOptions;
@end

/// An SDK error specific to Klarna Payments.
SWIFT_CLASS("_TtC10KlarnaCore18KlarnaPaymentError")
@interface KlarnaPaymentError : KlarnaError
/// If an error isn’t fatal, it may be due to invalid fields being supplied. The fields that need to be
/// corrected will be supplied here.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
/// If the error occured during a specific operation, it will be supplied here.
@property (nonatomic, readonly, copy) NSString * _Nullable action;
@end

/// Options to be sent to Klarna Payments on initialization.
SWIFT_CLASS("_TtC10KlarnaCore20KlarnaPaymentOptions")
@interface KlarnaPaymentOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// An SDK error specific to the Klarna Post Purchase native component.
SWIFT_CLASS("_TtC10KlarnaCore23KlarnaPostPurchaseError")
@interface KlarnaPostPurchaseError : KlarnaError
@property (nonatomic, readonly, copy) NSString * _Nullable status;
@end

typedef SWIFT_ENUM(NSInteger, KlarnaPostPurchaseRenderResult, open) {
  KlarnaPostPurchaseRenderResultNoStateChange = 1,
  KlarnaPostPurchaseRenderResultStateChange = 2,
};

@protocol NSCoding;
/// An event that’s sent to/from a given product we’re rendering in a component.
SWIFT_CLASS("_TtC10KlarnaCore18KlarnaProductEvent")
@interface KlarnaProductEvent : NSObject
/// Title or identifier for the event being sent.
@property (nonatomic, readonly, copy) NSString * _Nonnull action;
/// Klarna product this is being sent to/from.
/// The primary use for this is to interface with Klarna products in components that can render multiple
/// products.
/// When sending the event, you can set it to e.g. <code>KlarnaProduct.payments</code> to send this
/// event exclusively to Klarna Payments, or <code>KlarnaProduct.all</code> if you want every type of
/// component to receive it.
/// When receiving an event, the component will be from a specific product or <code>KlarnaProduct.none</code>
/// if the SDK can’t determine where the event is coming from.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
/// Is this a non-specific merchant event? AKA it’s an event to a merchant that we
/// didn’t spec out (e.g KCO’s events)
@property (nonatomic, readonly) BOOL isNonSpecificMerchantEvent;
/// SDK’s session ID
@property (nonatomic, readonly, copy) NSString * _Nullable sessionId;
/// Initializer available only for objc
- (nullable instancetype)initWithAction:(NSString * _Nonnull)action products:(NSSet<NSString *> * _Nonnull)products params:(NSDictionary<NSString *, id <NSCoding>> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Function available only for objc
- (NSDictionary<NSString *, id> * _Nullable)getParams SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options to on specific products when they’re initialized in a web view.
SWIFT_CLASS("_TtC10KlarnaCore20KlarnaProductOptions")
@interface KlarnaProductOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Geographic API region that the SDK performs requests to.
SWIFT_CLASS("_TtC10KlarnaCore12KlarnaRegion")
@interface KlarnaRegion : NSObject
/// Europe
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaRegion * _Nonnull eu;)
+ (KlarnaRegion * _Nonnull)eu SWIFT_WARN_UNUSED_RESULT;
/// North America
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaRegion * _Nonnull na;)
+ (KlarnaRegion * _Nonnull)na SWIFT_WARN_UNUSED_RESULT;
/// Oceania
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaRegion * _Nonnull oc;)
+ (KlarnaRegion * _Nonnull)oc SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol KlarnaSizingDelegate;
/// This is component with resizing contents.
/// Provide a size delegate to be notified of sizing changes.
SWIFT_PROTOCOL("_TtP10KlarnaCore24KlarnaResizableComponent_")
@protocol KlarnaResizableComponent
/// Height of the component’s content in points.
@property (nonatomic, readonly) CGFloat contentHeight;
/// Delegate that gets called when the component’s content changes height. Change its external
/// height here.
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@end

/// The SDK retrieves resources and performs API calls to one of several cloud platforms (think AWS, GCP,
/// Azure…). This “enum” determines what endpoints it should be using.
/// This should generally not be read or set with the exception of very specific integrations. Klarna may
/// still reserve the right override any selection you set based on legal or contractual requirements. Don’t
/// use these unless explicitly agreed with Klarna.
SWIFT_CLASS("_TtC10KlarnaCore22KlarnaResourceEndpoint")
@interface KlarnaResourceEndpoint : NSObject
/// First provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaResourceEndpoint * _Nonnull alternative1;)
+ (KlarnaResourceEndpoint * _Nonnull)alternative1 SWIFT_WARN_UNUSED_RESULT;
/// Second provider
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KlarnaResourceEndpoint * _Nonnull alternative2;)
+ (KlarnaResourceEndpoint * _Nonnull)alternative2 SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// This is a component with scrolling contents.
/// Get (or set) the below properties to change how scrolling in the component behaves.
SWIFT_PROTOCOL("_TtP10KlarnaCore25KlarnaScrollableComponent_")
@protocol KlarnaScrollableComponent
/// A boolean value that determines whether scrolling is enabled for the component.
@property (nonatomic) BOOL isScrollEnabled;
/// The custom distance that the content view is inset from the safe area or scroll view edges.
@property (nonatomic) UIEdgeInsets contentInset;
/// The point at which the origin of the content view is offset from the origin of the scroll view.
@property (nonatomic, readonly) CGPoint contentOffset;
/// The behavior for determining the adjusted content offsets.
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The manner in which the keyboard is dismissed when a drag begins in the scroll view.
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
/// If this component is a subview of another scroll view, provide a reference to it here to allow the
/// SDK to make both views scroll as one.
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
/// When a keyboard appears and this view’s scroll view is nested in a parent scroll view, setting this
/// value to <code>true</code> ensures that only the outer scroll view adjusts its insets.
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

/// Components conforming to this protocol render a single Klarna product at a time.
/// Empty for now, but keeping it for completeness, as it represents <code>KlarnaMultiComponent</code>’s
/// counterpart.
SWIFT_PROTOCOL("_TtP10KlarnaCore21KlarnaSingleComponent_")
@protocol KlarnaSingleComponent <KlarnaComponent>
@end

/// Interface to an object that’s notified when a component’s content has changed height internally.
/// Compnents don’t size themselves, as the SDK can’t tell whether your app sets any external constraints.
/// If you want to be able to size the component:
/// <ul>
///   <li>
///     Implement this protocol.
///   </li>
///   <li>
///     Set it on the component’s <code>KlarnaResizableComponent/sizingDelegate</code>.
///   </li>
///   <li>
///     When this protocol’s function is called, size the component based on the supplied height (e.g., with
///     constraints, setting the frame, etc).
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP10KlarnaCore20KlarnaSizingDelegate_")
@protocol KlarnaSizingDelegate
/// Called when a Klarna component has changed size.
/// \param klarnaComponent Component that changed size.
///
/// \param height Height in points that the component resized to.
///
- (void)klarnaComponent:(id <KlarnaComponent> _Nonnull)klarnaComponent resizedToHeight:(CGFloat)height;
@end

/// This is a component that hosts and owns its own content.
SWIFT_PROTOCOL("_TtP10KlarnaCore25KlarnaStandaloneComponent_")
@protocol KlarnaStandaloneComponent <KlarnaComponent, KlarnaResizableComponent, KlarnaScrollableComponent>
@end

/// Text style configuration for text elements in Klarna components.
SWIFT_CLASS("_TtC10KlarnaCore28KlarnaTextStyleConfiguration")
@interface KlarnaTextStyleConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIFont;
SWIFT_CLASS_NAMED("Builder")
@interface KlarnaTextStyleBuilder : NSObject
- (nonnull instancetype)setTextColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setTextFont:(UIFont * _Nullable)font SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setTextSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (KlarnaTextStyleConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines the theme (or style) that components should use.
/// The theme will always default to <code>light</code>. Automatic switching is opt-in. This is because both Klarna
/// and many existing apps that integrate the SDK historically only support a light theme, and we don’t want
/// to break existing integrations.
typedef SWIFT_ENUM(NSInteger, KlarnaTheme, open) {
/// Style this component with a dark theme (dark background with light foreground content).
  KlarnaThemeDark = 0,
/// Style this component with a light theme (light background with dark foreground content).
  KlarnaThemeLight = 1,
/// Style this component to automatically change its theme according to your app’s  <code>userInterfaceStyle</code>.
  KlarnaThemeAutomatic = 2,
};

/// General class that envelops all web views. Was originally used to mask away <code>WKWebView</code> and
/// <code>UIWebView</code> specializations.
/// note:
/// Kept for compatibility until integrators migrate.
SWIFT_PROTOCOL("_TtP10KlarnaCore13KlarnaWebView_") SWIFT_DEPRECATED_MSG("Not used as a type anymore.")
@protocol KlarnaWebView
@end

@class UIWindowScene;
SWIFT_CLASS("_TtC10KlarnaCore12KlarnaWindow")
@interface KlarnaWindow : UIWindow
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithWindowScene:(UIWindowScene * _Nonnull)windowScene SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// Based on https://github.com/twho/loading-buttons-ios/blob/master/LoadingButtons/Indicators/MaterialLoadingIndicator.swift
SWIFT_CLASS("_TtC10KlarnaCore11LoadingView")
@interface LoadingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

SWIFT_DEPRECATED
@interface WKWebView (SWIFT_EXTENSION(KlarnaCore)) <KlarnaWebView>
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
