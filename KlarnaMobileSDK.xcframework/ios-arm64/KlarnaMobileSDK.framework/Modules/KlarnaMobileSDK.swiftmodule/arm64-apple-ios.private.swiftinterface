// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name KlarnaMobileSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AuthenticationServices
import CryptoKit
import DeveloperToolsSupport
import Foundation
import JavaScriptCore
@_spi(KLARNA) import KlarnaCore
@_exported import KlarnaMobileSDK
import Security
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class KlarnaCheckoutView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class KlarnaExpressButton : UIKit.UIControl {
  @objc @_Concurrency.MainActor @preconcurrency public var buttonTheme: KlarnaCore.KlarnaButtonTheme {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var buttonShape: KlarnaCore.KlarnaButtonShape {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var buttonLabel: KlarnaCore.KlarnaButtonLabel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public init(clientId: Swift.String, locale: Swift.String, buttonTheme: KlarnaCore.KlarnaButtonTheme = .klarna, buttonShape: KlarnaCore.KlarnaButtonShape = .roundedRect, buttonLabel: KlarnaCore.KlarnaButtonLabel = .klarnaProduct, theme: KlarnaCore.KlarnaTheme = .automatic, environment: KlarnaCore.KlarnaEnvironment = .production, region: KlarnaCore.KlarnaRegion = .na, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class KlarnaExpressCheckoutButton : UIKit.UIControl {
  @objc @_Concurrency.MainActor @preconcurrency public init(options: KlarnaMobileSDK.KlarnaExpressCheckoutButtonOptions)
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override final public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class KlarnaHybridSDK : ObjectiveC.NSObject {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class KlarnaOSMView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var hostViewController: UIKit.UIViewController?
  @objc @_Concurrency.MainActor @preconcurrency public var styleConfiguration: KlarnaMobileSDK.KlarnaOSMStyleConfiguration?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class KlarnaPaymentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KlarnaPostPurchaseSDK : ObjectiveC.NSObject {
  @objc deinit
}
extension UIKit.UIFont {
  public static func loadFonts()
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc @_Concurrency.MainActor @preconcurrency public class KlarnaSignInButton : UIKit.UIControl {
  @objc @_Concurrency.MainActor @preconcurrency public var buttonTheme: KlarnaCore.KlarnaButtonTheme {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var buttonShape: KlarnaCore.KlarnaButtonShape {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var buttonLabel: KlarnaCore.KlarnaButtonLabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var buttonLogoAlignment: KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, theme: KlarnaCore.KlarnaTheme = .light, environment: KlarnaCore.KlarnaEnvironment = .production, region: KlarnaCore.KlarnaRegion = .eu, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler, loggingLevel: KlarnaCore.KlarnaLoggingLevel = .off, tokenizationDelegate: (any KlarnaMobileSDK.KlarnaSignInTokenizationDelegate)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
@objc public enum KlarnaSignInButtonLogoAlignment : Swift.Int {
  case left
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc public class KlarnaSignInSDK : ObjectiveC.NSObject {
  @objc public init(theme: KlarnaCore.KlarnaTheme = .light, environment: KlarnaCore.KlarnaEnvironment = .production, region: KlarnaCore.KlarnaRegion = .eu, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler, loggingLevel: KlarnaCore.KlarnaLoggingLevel = .off)
  @objc public func signIn(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String? = nil, tokenizationId: Swift.String? = nil, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding)
  @objc deinit
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var checkoutOptions: KlarnaCore.KlarnaCheckoutOptions? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(returnURL: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(returnURL: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler, environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(returnURL: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint)
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setSnippet(_ snippet: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func suspend()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func resume()
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView : KlarnaCore.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaCheckoutView : KlarnaCore.KlarnaStandaloneComponent {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var sizingDelegate: (any KlarnaCore.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class KlarnaCheckoutViewDebug : KlarnaMobileSDK.KlarnaCheckoutView {
  @nonobjc @_Concurrency.MainActor @preconcurrency public func registerTestAppDelegate(_ delegate: @escaping (KlarnaCore.KlarnaDebugEvent) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func loadUrl(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func evaluateJS(_ script: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func clearWebViewCookies()
  @_Concurrency.MainActor @preconcurrency public func clearWebViewCache()
  @_Concurrency.MainActor @preconcurrency public func setInitScriptURL(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func setMessageBridgeURL(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func setSnippetBuildHash(_ buildHash: Swift.String?)
  @objc deinit
}
public typealias KlarnaExpressButtonErrorName = Swift.String
extension Swift.String {
  public static let KlarnaExpressButtonErrorInvalidParams: Swift.String
  public static let KlarnaExpressButtonErrorMerchantDisabled: Swift.String
  public static let KlarnaExpressButtonErrorRender: Swift.String
}
@objc extension KlarnaMobileSDK.KlarnaExpressButton {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var clientId: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var locale: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(clientId: Swift.String, locale: Swift.String = "en-US", returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(clientId: Swift.String, locale: Swift.String = "en-US", buttonTheme: KlarnaCore.KlarnaButtonTheme = .klarna, buttonShape: KlarnaCore.KlarnaButtonShape = .roundedRect, buttonLabel: KlarnaCore.KlarnaButtonLabel = .klarnaProduct, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
}
@objc extension KlarnaMobileSDK.KlarnaExpressButton : KlarnaCore.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaExpressButton : KlarnaCore.KlarnaStandaloneComponent {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var sizingDelegate: (any KlarnaCore.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class KlarnaExpressButtonDebug : KlarnaMobileSDK.KlarnaExpressButton {
  @_Concurrency.MainActor @preconcurrency public func fullscreenPresentation(force: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setExpressButtonVersion(_ version: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func setExpressButtonEndpoint(_ url: Swift.String?)
  @_Concurrency.MainActor @preconcurrency override public init(clientId: Swift.String, locale: Swift.String, buttonTheme: KlarnaCore.KlarnaButtonTheme = super, buttonShape: KlarnaCore.KlarnaButtonShape = super, buttonLabel: KlarnaCore.KlarnaButtonLabel = super, theme: KlarnaCore.KlarnaTheme = super, environment: KlarnaCore.KlarnaEnvironment = super, region: KlarnaCore.KlarnaRegion = super, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = super, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class KlarnaExpressCheckoutButtonAuthorizationResponse : ObjectiveC.NSObject {
  final public let showForm: Swift.Bool
  final public let approved: Swift.Bool
  final public let finalizedRequired: Swift.Bool
  final public let clientToken: Swift.String?
  final public let authorizationToken: Swift.String?
  final public let sessionId: Swift.String
  final public let collectedShippingAddress: Swift.String?
  final public let merchantReference1: Swift.String?
  final public let merchantReference2: Swift.String?
  @objc deinit
}
@objc final public class KlarnaExpressCheckoutButtonOptions : ObjectiveC.NSObject {
  public init(sessionOptions: KlarnaMobileSDK.KlarnaExpressCheckoutSessionOptions, returnUrl: Swift.String, delegate: any KlarnaMobileSDK.KlarnaExpressCheckoutButtonDelegate, locale: Swift.String? = nil, styleConfiguration: KlarnaMobileSDK.KlarnaExpressCheckoutButtonStyleConfiguration? = nil, theme: KlarnaCore.KlarnaTheme? = nil, environment: KlarnaCore.KlarnaEnvironment? = nil, region: KlarnaCore.KlarnaRegion? = nil, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint? = nil, loggingLevel: KlarnaCore.KlarnaLoggingLevel? = nil)
  @objc deinit
}
@objc final public class KlarnaExpressCheckoutButtonStyleConfiguration : ObjectiveC.NSObject {
  final public let theme: KlarnaCore.KlarnaButtonTheme?
  final public let shape: KlarnaCore.KlarnaButtonShape?
  final public let style: KlarnaCore.KlarnaButtonStyle?
  public init(theme: KlarnaCore.KlarnaButtonTheme? = nil, shape: KlarnaCore.KlarnaButtonShape? = nil, style: KlarnaCore.KlarnaButtonStyle? = nil)
  @objc deinit
}
public typealias KlarnaExpressCheckoutError = Swift.String
@_hasMissingDesignatedInitializers @objc public class KlarnaExpressCheckoutSessionOptions : ObjectiveC.NSObject {
  @_hasMissingDesignatedInitializers @objc final public class ClientSideSession : KlarnaMobileSDK.KlarnaExpressCheckoutSessionOptions {
    public init(clientId: Swift.String, sessionData: Swift.String, autoFinalize: Swift.Bool = true, collectShippingAddress: Swift.Bool = false)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers @objc final public class ServerSideSession : KlarnaMobileSDK.KlarnaExpressCheckoutSessionOptions {
    public init(clientToken: Swift.String, autoFinalize: Swift.Bool = true, collectShippingAddress: Swift.Bool = false, sessionData: Swift.String? = nil)
    @objc deinit
  }
  @objc deinit
}
public protocol KlarnaExpressCheckoutButtonDelegate : AnyObject {
  func onAuthorized(view: KlarnaMobileSDK.KlarnaExpressCheckoutButton, response: KlarnaMobileSDK.KlarnaExpressCheckoutButtonAuthorizationResponse)
  func onError(view: KlarnaMobileSDK.KlarnaExpressCheckoutButton, error: KlarnaCore.KlarnaError)
}
@available(*, deprecated, message: "Use KlarnaEventHandler and KlarnaFullscreenEventListener instead.")
@objc public protocol KlarnaHybridEventListener : KlarnaMobileSDK.KlarnaFullscreenEventListener {
  @objc func klarnaFailed(inWebView webView: any KlarnaCore.KlarnaWebView, withError error: KlarnaCore.KlarnaMobileSDKError)
}
@objc public protocol KlarnaFullscreenEventListener {
  @objc func klarnaWillShowFullscreen(inWebView webView: any KlarnaCore.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaDidShowFullscreen(inWebView webView: any KlarnaCore.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaWillHideFullscreen(inWebView webView: any KlarnaCore.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
  @objc func klarnaDidHideFullscreen(inWebView webView: any KlarnaCore.KlarnaWebView, completionHandler: @escaping () -> Swift.Void)
}
@objc extension KlarnaMobileSDK.KlarnaHybridSDK {
  @objc @available(*, deprecated, message: "This has been replaced with KlarnaProductOptions to accommodate more options.")
  dynamic public var klarnaInitData: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var productOptions: KlarnaCore.KlarnaProductOptions {
    @objc get
  }
  @objc dynamic public var fullscreenEventListener: (any KlarnaMobileSDK.KlarnaFullscreenEventListener)? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use the new initializer instead.")
  convenience dynamic public init(returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaHybridEventListener, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1)
  @objc @available(*, deprecated, message: "Use the new initializer instead.")
  convenience dynamic public init(returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaHybridEventListener)
  @objc @available(*, deprecated, message: "Use the new initializer instead.")
  convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventListener: any KlarnaCore.KlarnaEventListener, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1)
  @objc @available(*, deprecated, message: "Use the new initializer instead.")
  convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventListener: any KlarnaCore.KlarnaEventListener)
  @objc convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventHandler: any KlarnaCore.KlarnaEventHandler, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1)
  @objc convenience dynamic public init(returnUrl: Foundation.URL, klarnaEventHandler: any KlarnaCore.KlarnaEventHandler, environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1)
}
@objc extension KlarnaMobileSDK.KlarnaHybridSDK {
  @objc dynamic public func addWebView(_ webView: WebKit.WKWebView)
  @objc dynamic public func newPageLoad(in webView: WebKit.WKWebView)
  @objc @available(*, deprecated, message: "Use the `newPageLoad` instead.")
  dynamic public func newPageWillLoad(in webView: WebKit.WKWebView)
  @objc dynamic public func shouldFollowNavigation(withRequest request: Foundation.URLRequest) -> Swift.Bool
  @objc @available(*, deprecated, message: "Do not use.")
  public static func deviceIdentifier() -> Swift.String
  @objc @available(*, deprecated, message: "SDK does not need this to be called anymore. Will be removed in future releases.")
  public static func handleDeeplink(withUrl url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any])
  @objc @available(*, deprecated, message: "Replaced with implementing KlarnaEventHandler set as EventHandler.")
  dynamic public func registerEventListener(withCallback callback: @escaping (KlarnaCore.KlarnaEvent) -> Swift.Void)
}
@objc extension KlarnaMobileSDK.KlarnaHybridSDK : KlarnaCore.KlarnaMultiComponent {
  @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
  @objc dynamic public var enabledProducts: KlarnaCore.KlarnaProducts {
    @objc get
    @objc set
  }
  @objc dynamic public func sendEvent(_ event: KlarnaCore.KlarnaProductEvent)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KlarnaHybridSDKDebug : KlarnaMobileSDK.KlarnaHybridSDK {
  public func clearWebViewCookies()
  public func clearWebViewCache()
  public func evaluateJS(_ script: Swift.String)
  public func addCookie(name: Swift.String, value: Swift.String)
  @nonobjc public func registerTestAppDelegate(_ delegate: @escaping (KlarnaCore.KlarnaDebugEvent) -> Swift.Void)
  @objc deinit
}
public typealias KlarnaOSMErrorName = Swift.String
extension Swift.String {
  public static let KlarnaOSMErrorMissingClientId: Swift.String
  public static let KlarnaOSMErrorMissingPlacementKey: Swift.String
  public static let KlarnaOSMErrorInvalidLocale: Swift.String
  public static let KlarnaOSMErrorMissingHost: Swift.String
  public static let KlarnaOSMErrorDisabled: Swift.String
  public static let KlarnaOSMErrorNetworkError: Swift.String
  public static let KlarnaOSMErrorMissingRegion: Swift.String
  public static let KlarnaOSMErrorPlacementError: Swift.String
  public static let KlarnaOSMErrorNoContent: Swift.String
}
@available(*, deprecated, message: "Implement KlarnaSizingDelegate instead.")
@objc public protocol KlarnaOSMViewEventListener {
  @objc func klarnaOSMViewResized(_ height: CoreFoundation.CGFloat)
}
@available(*, deprecated, renamed: "KlarnaEnvironment", message: "Use KlarnaEnvironment instead.")
public typealias KlarnaOSMEnvironment = KlarnaCore.KlarnaEnvironment
@available(*, deprecated, renamed: "KlarnaRegion", message: "Use KlarnaRegion instead.")
public typealias KlarnaOSMRegion = KlarnaCore.KlarnaRegion
@available(*, deprecated, renamed: "KlarnaTheme", message: "Use KlarnaTheme instead.")
public typealias KlarnaOSMTheme = KlarnaCore.KlarnaTheme
@_hasMissingDesignatedInitializers @objc public class KlarnaOSMStyleConfiguration : ObjectiveC.NSObject {
  final public let backgroundColor: UIKit.UIColor?
  final public let textStyleConfiguration: KlarnaCore.KlarnaTextStyleConfiguration?
  @_inheritsConvenienceInitializers @objc(KlarnaOSMStyleBuilder) public class Builder : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc public func setBackgroundColor(_ color: UIKit.UIColor?) -> Self
    @objc public func setTextStyleConfiguration(_ configuration: KlarnaCore.KlarnaTextStyleConfiguration) -> Self
    @objc public func build() -> KlarnaMobileSDK.KlarnaOSMStyleConfiguration
    @objc deinit
  }
  @objc deinit
}
public typealias RenderResult = (_ error: KlarnaCore.KlarnaError?) -> Swift.Void
@objc extension KlarnaMobileSDK.KlarnaOSMView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var clientId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var placementKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var locale: Swift.String {
    @objc get
    @objc set
  }
  @nonobjc @_Concurrency.MainActor @preconcurrency public var purchaseAmount: Swift.Int? {
    get
    set
  }
  @objc @available(*, deprecated, message: "Set a KlarnaSizingDelegate on sizingDelegate instead.")
  @_Concurrency.MainActor @preconcurrency weak dynamic public var delegate: (any KlarnaMobileSDK.KlarnaOSMViewEventListener)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setPurchaseAmount(_ amount: Foundation.NSNumber?)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func render(callback: @escaping KlarnaMobileSDK.RenderResult)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func render()
}
@objc extension KlarnaMobileSDK.KlarnaOSMView : KlarnaCore.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaOSMView : KlarnaCore.KlarnaStandaloneComponent {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var sizingDelegate: (any KlarnaCore.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
public typealias KlarnaPaymentMethodCategory = Swift.String
extension Swift.String {
  public static let PayNow: Swift.String
  public static let PayLater: Swift.String
  public static let SliceIt: Swift.String
  public static let PayInParts: Swift.String
}
@available(*, deprecated, message: "Use KlarnaPaymentViewEventListener instead.")
public protocol KlarnaPaymentViewDelegate : KlarnaCore.KlarnaEventHandler {
  func klarnaPaymentViewInitialized(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentViewLoaded(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentViewLoadedPaymentReview(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, authorizedWithToken authToken: Swift.String?, finalizeRequired: Swift.Bool?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, reauthorizedWithToken authToken: Swift.String?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool?, finalizedWithToken authToken: Swift.String?)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, resizedToHeight height: CoreFoundation.CGFloat)
  func klarnaPaymentView(_ paymentView: KlarnaMobileSDK.KlarnaPaymentView, failedWithError error: KlarnaCore.KlarnaPaymentsError)
}
@objc public protocol KlarnaPaymentEventListener {
  @objc func klarnaInitialized(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaLoaded(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaLoadedPaymentReview(paymentView: KlarnaMobileSDK.KlarnaPaymentView)
  @objc func klarnaAuthorized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?, finalizeRequired: Swift.Bool)
  @objc func klarnaReauthorized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?)
  @objc func klarnaFinalized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, approved: Swift.Bool, authToken: Swift.String?)
  @objc func klarnaResized(paymentView: KlarnaMobileSDK.KlarnaPaymentView, to newHeight: CoreFoundation.CGFloat)
  @objc func klarnaFailed(inPaymentView paymentView: KlarnaMobileSDK.KlarnaPaymentView, withError error: KlarnaCore.KlarnaPaymentError)
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var category: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isAvalable: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var paymentOptions: KlarnaCore.KlarnaPaymentOptions {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(category: Swift.String, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(category: Swift.String, returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(category: Swift.String, returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener, environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(category: Swift.String, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(category: Swift.String, returnUrl: Foundation.URL, eventListener: any KlarnaMobileSDK.KlarnaPaymentEventListener, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint)
  @available(*, deprecated, message: "Use the new initializer instead.")
  @nonobjc @_Concurrency.MainActor @preconcurrency convenience public init(clientToken: Swift.String, category: Swift.String, returnUrl: Foundation.URL, delegate: any KlarnaMobileSDK.KlarnaPaymentViewDelegate, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = .alternative1)
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func initialize(clientToken: Swift.String, returnUrl: Foundation.URL)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func initialize(clientToken: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func load(jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func loadPaymentReview()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func authorize(jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func authorize(autoFinalize: Swift.Bool, jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func reauthorize(jsonData: Swift.String? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func finalise(jsonData: Swift.String? = nil)
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView : KlarnaCore.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaPaymentView : KlarnaCore.KlarnaStandaloneComponent {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var sizingDelegate: (any KlarnaCore.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class KlarnaPaymentViewDebug : KlarnaMobileSDK.KlarnaPaymentView {
  @_Concurrency.MainActor @preconcurrency public func registerTestAppDelegate(_ delegate: @escaping (KlarnaCore.KlarnaDebugEvent) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func loadUrl(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func evaluateJS(_ script: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func clearWebViewCookies()
  @_Concurrency.MainActor @preconcurrency public func clearWebViewCache()
  @_Concurrency.MainActor @preconcurrency public func setInitScriptURL(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func setMessageBridgeURL(_ url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func setPaymentsLibraryLibUrl(_ url: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setPaymentsLibraryAppVersion(_ version: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setPaymentsLibraryLibVersion(_ version: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setPaymentsWrapperURL(_ url: Foundation.URL, isLocalFile: Swift.Bool)
  @objc deinit
}
@objc public protocol KlarnaPostPurchaseEventListener {
  @objc func onAuthorizeRequested(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK)
  @objc func onInitialized(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK)
  @objc func onRenderedOperation(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK, result: KlarnaCore.KlarnaPostPurchaseRenderResult)
  @objc func onError(klarnaPostPurchaseSDK: KlarnaMobileSDK.KlarnaPostPurchaseSDK, error: KlarnaCore.KlarnaPostPurchaseError)
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK {
  @objc convenience dynamic public init(environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, listener: any KlarnaMobileSDK.KlarnaPostPurchaseEventListener)
  @objc convenience dynamic public init(environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint, listener: any KlarnaMobileSDK.KlarnaPostPurchaseEventListener)
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK {
  @objc dynamic public func initialize(locale: Swift.String, purchaseCountry: Swift.String, design: Swift.String?)
  @objc dynamic public func authorizationRequest(clientId: Swift.String, scope: Swift.String, redirectUri: Swift.String, locale: Swift.String?, state: Swift.String?, loginHint: Swift.String?, responseType: Swift.String?)
  @objc dynamic public func renderOperation(operationToken: Swift.String, locale: Swift.String?, redirectUri: Swift.String?)
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK : KlarnaCore.KlarnaSingleComponent {
}
@objc extension KlarnaMobileSDK.KlarnaPostPurchaseSDK : KlarnaCore.KlarnaComponent {
  @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
}
public typealias KlarnaSignInErrorName = Swift.String
extension Swift.String {
  public static let klarnaSignInInvalidClientID: Swift.String
  public static let klarnaSignInInvalidScope: Swift.String
  public static let klarnaSignInInvalidMarket: Swift.String
  public static let klarnaSignInInvalidPresentationContext: Swift.String
  public static let klarnaSignInAlreadyInProgress: Swift.String
  public static let klarnaSignInAuthorizationFailed: Swift.String
  public static let klarnaSignInCompletedWithoutToken: Swift.String
  public static let klarnaSignInMissingTokenizationDelegate: Swift.String
  public static let klarnaSignInTokenizationDelegateTimeout: Swift.String
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInButton {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var clientId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var scope: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var market: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var locale: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, theme: KlarnaCore.KlarnaTheme, environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInButton : KlarnaCore.KlarnaSingleComponent {
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInButton {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public class KlarnaSignInButtonDebug : KlarnaMobileSDK.KlarnaSignInButton {
  @_Concurrency.MainActor @preconcurrency public func setEphemeralWebBrowserSession(enabled: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setPrompt(_ query: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc override public init(clientId: Swift.String, scope: Swift.String, market: Swift.String, locale: Swift.String, presentationContext: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, theme: KlarnaCore.KlarnaTheme = super, environment: KlarnaCore.KlarnaEnvironment = super, region: KlarnaCore.KlarnaRegion = super, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = super, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler, loggingLevel: KlarnaCore.KlarnaLoggingLevel = super, tokenizationDelegate: (any KlarnaMobileSDK.KlarnaSignInTokenizationDelegate)? = nil)
  @objc deinit
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInSDK {
  @objc convenience dynamic public init(returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @objc convenience dynamic public init(environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
  @objc convenience dynamic public init(theme: KlarnaCore.KlarnaTheme, environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler)
}
@available(iOS 13.0, *)
@objc extension KlarnaMobileSDK.KlarnaSignInSDK : KlarnaCore.KlarnaComponent {
  @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class KlarnaSignInSDKDebug : KlarnaMobileSDK.KlarnaSignInSDK {
  public func setEphemeralWebBrowserSession(enabled: Swift.Bool)
  public func setPrompt(_ query: Swift.String?)
  @objc override public init(theme: KlarnaCore.KlarnaTheme = super, environment: KlarnaCore.KlarnaEnvironment = super, region: KlarnaCore.KlarnaRegion = super, resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint = super, returnUrl: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler, loggingLevel: KlarnaCore.KlarnaLoggingLevel = super)
  @objc deinit
}
@objc public protocol KlarnaSignInTokenizationDelegate {
  @objc func onTokenization(_ klarnaComponent: any KlarnaCore.KlarnaComponent, completionHandler: @escaping (Swift.String) -> Swift.Void)
}
@objc public protocol KlarnaStandaloneWebViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, handler: (_ policy: WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didReceiveRedirectForProvisionalNavigation navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didCommit navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didFinish navigation: WebKit.WKNavigation)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation, withError error: any Swift.Error)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, didFail navigation: WebKit.WKNavigation, withError error: any Swift.Error)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, forNavigation navigationAction: WebKit.WKNavigationAction, withFeatures windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @available(iOS 15.0, *)
  @objc optional func klarnaStandaloneWebView(_ webView: KlarnaMobileSDK.KlarnaStandaloneWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, ofType type: WebKit.WKMediaCaptureType, handler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
}
@objc public enum KlarnaWebViewOpeningBehavior : Swift.Int, Swift.CustomDebugStringConvertible {
  case delegate
  case ignore
  case navigate
  case systemBrowser
  case internalBrowser
  public var debugDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class KlarnaStandaloneWebView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var estimatedProgress: Swift.Double {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var delegate: (any KlarnaMobileSDK.KlarnaStandaloneWebViewDelegate)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(returnURL: Foundation.URL)
  @objc @_Concurrency.MainActor @preconcurrency public init(returnURL: Foundation.URL, eventHandler: any KlarnaCore.KlarnaEventHandler, environment: KlarnaCore.KlarnaEnvironment, region: KlarnaCore.KlarnaRegion)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension KlarnaMobileSDK.KlarnaStandaloneWebView {
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func loadURLRequest(_ request: Foundation.URLRequest) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func loadURL(_ url: Foundation.URL) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func loadFileURL(_ url: Foundation.URL, allowingReadAccessTo readAccessUrl: Foundation.URL) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func loadHTML(_ htmlString: Swift.String, withBaseURL baseUrl: Foundation.URL? = nil) -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func reload() -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func reloadFromOrigin() -> WebKit.WKNavigation?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopLoading()
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func goBack() -> WebKit.WKNavigation?
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func goForward() -> WebKit.WKNavigation?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var url: Foundation.URL? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var title: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isLoading: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var canGoForward: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var canGoBack: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var contentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isInspectable: Swift.Bool {
    @objc get
    @objc set
  }
  @available(iOS 15.0, *)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var underPageBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var allowsBackForwardAnimationGestures: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var allowsLinkPreview: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isOpaque: Swift.Bool {
    @objc get
    @objc set
  }
  @available(iOS 14, *)
  @_Concurrency.MainActor @preconcurrency public func evaluateJavaScript(_ javaScript: Swift.String, frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld = WKContentWorld.page, completion: ((_ result: Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func evaluateJavaScript(_ javaScript: Swift.String, frame: WebKit.WKFrameInfo? = nil, completion: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addUserScript(_ script: WebKit.WKUserScript)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func removeAllUserScripts()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var userScripts: [WebKit.WKUserScript] {
    @objc get
  }
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addScriptMessageHandler(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, named name: Swift.String, to contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addScriptMessageHandler(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, named name: Swift.String)
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addScriptMessageHandlerWithReply(_ scriptMessageHandlerWithReply: any WebKit.WKScriptMessageHandlerWithReply, named name: Swift.String, to contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func removeScriptMessageHandler(named name: Swift.String, from contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func removeScriptMessageHandler(named name: Swift.String)
  @available(iOS 14.0, *)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func removeAllScriptMessageHandlers(from contentWorld: WebKit.WKContentWorld = WKContentWorld.page)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func removeAllScriptMessageHandlers()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var scriptMessageHandlers: [any WebKit.WKScriptMessageHandler] {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var scriptMessageHandlersWithReply: [any WebKit.WKScriptMessageHandlerWithReply] {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var cachingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func clearCache()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func clearCookies()
}
extension KlarnaMobileSDK.KlarnaStandaloneWebView : KlarnaCore.KlarnaMultiComponent {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var productOptions: KlarnaCore.KlarnaProductOptions {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var enabledProducts: KlarnaCore.KlarnaProducts {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func sendEvent(_ event: KlarnaCore.KlarnaProductEvent)
}
extension KlarnaMobileSDK.KlarnaStandaloneWebView : KlarnaCore.KlarnaStandaloneComponent {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var region: KlarnaCore.KlarnaRegion? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var environment: KlarnaCore.KlarnaEnvironment? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var resourceEndpoint: KlarnaCore.KlarnaResourceEndpoint {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var returnURL: Foundation.URL? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var theme: KlarnaCore.KlarnaTheme {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var eventHandler: (any KlarnaCore.KlarnaEventHandler)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var loggingLevel: KlarnaCore.KlarnaLoggingLevel {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var products: KlarnaCore.KlarnaProducts {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var sizingDelegate: (any KlarnaCore.KlarnaSizingDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentOffset: CoreFoundation.CGPoint {
    @objc get
  }
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var contentInsetAdjustmentBehavior: UIKit.UIScrollView.ContentInsetAdjustmentBehavior {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var parentScrollView: UIKit.UIScrollView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var adjustsParentScrollViewInsets: Swift.Bool {
    @objc get
    @objc set
  }
}
extension KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaSignInButtonLogoAlignment : Swift.RawRepresentable {}
extension KlarnaMobileSDK.KlarnaWebViewOpeningBehavior : Swift.Equatable {}
extension KlarnaMobileSDK.KlarnaWebViewOpeningBehavior : Swift.Hashable {}
extension KlarnaMobileSDK.KlarnaWebViewOpeningBehavior : Swift.RawRepresentable {}
