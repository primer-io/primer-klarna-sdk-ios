#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef KLARNAMOBILESDK_SWIFT_H
#define KLARNAMOBILESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import KlarnaCore;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSCoder;
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaCheckoutView")
@interface KlarnaCheckoutView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didMoveToWindow;
@end

@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@class NSString;
@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Set the HTML snippet that you get from Klarna when creating an order to load Klarna Checkout
/// into this view.
/// \param snippet the HTML snippet that will be rendered in this view.
///
- (void)setSnippet:(NSString * _Nullable)snippet;
/// Signals checkout to suspend the checkout process. Customers won’t be able to operate on the
/// checkout view.
- (void)suspend;
/// Signals checkout to resume operations. It may do a backend check on the order state.
- (void)resume;
@end

@class KlarnaCheckoutOptions;
@class NSURL;
@protocol KlarnaEventHandler;
@class KlarnaEnvironment;
@class KlarnaRegion;
@class KlarnaResourceEndpoint;
@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Options for Klarna Checkout integration
@property (nonatomic, readonly, strong) KlarnaCheckoutOptions * _Nullable checkoutOptions;
/// Create a Klarna Checkout View
/// note:
///
/// Klarna checkout view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param returnURL Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventHandler A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Create a Klarna Checkout View
/// note:
///
/// Klarna checkout view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param returnURL Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventHandler A listener that will receive events from the SDK.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Optional value that initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Create a Klarna Checkout View
/// note:
///
/// Klarna checkout view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param returnURL Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventHandler A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Optional value that initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
@end

@protocol KlarnaSizingDelegate;
@class UIScrollView;
@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK23KlarnaCheckoutViewDebug")
@interface KlarnaCheckoutViewDebug : KlarnaCheckoutView
@end

@class UITraitCollection;
SWIFT_CLASS("_TtC15KlarnaMobileSDK19KlarnaExpressButton")
@interface KlarnaExpressButton : UIControl
@property (nonatomic) enum KlarnaButtonTheme buttonTheme;
@property (nonatomic) enum KlarnaButtonShape buttonShape;
@property (nonatomic) enum KlarnaButtonLabel buttonLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@interface KlarnaExpressButton (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@interface KlarnaExpressButton (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Merchant identification (MID) code assigned to every merchant using Klarna.
@property (nonatomic, readonly, copy) NSString * _Nullable clientId;
/// Localization, list of supported locales can be found in https://docs.klarna.com/express-button/availiability/.
@property (nonatomic, readonly, copy) NSString * _Nonnull locale;
/// Create a Klarna Express Button
/// note:
///
/// Klarna Express Button view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param clientId Merchant identification (MID)
///
/// \param locale Localization
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaExpressButton instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId locale:(NSString * _Nonnull)locale returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Create a Klarna Express Button
/// note:
///
/// Klarna Express Button view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param clientId Merchant identification (MID)
///
/// \param locale Localization
///
/// \param buttonTheme Customization of the theme appearance.
///
/// \param buttonShape Customization of the shape appearance.
///
/// \param buttonLabel Customization of the label appearance.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaExpressButton instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId locale:(NSString * _Nonnull)locale buttonTheme:(enum KlarnaButtonTheme)buttonTheme buttonShape:(enum KlarnaButtonShape)buttonShape buttonLabel:(enum KlarnaButtonLabel)buttonLabel returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
@end

@interface KlarnaExpressButton (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK24KlarnaExpressButtonDebug")
@interface KlarnaExpressButtonDebug : KlarnaExpressButton
@end

@class KlarnaExpressCheckoutButtonOptions;
@class UITouch;
@class UIEvent;
SWIFT_CLASS("_TtC15KlarnaMobileSDK27KlarnaExpressCheckoutButton")
@interface KlarnaExpressCheckoutButton : UIControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithOptions:(KlarnaExpressCheckoutButtonOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK48KlarnaExpressCheckoutButtonAuthorizationResponse")
@interface KlarnaExpressCheckoutButtonAuthorizationResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options for configuring the Klarna Express Checkout button.
/// \param sessionOptions Authorization params object with default values of each param.
///
/// \param returnURL The return URL which should be used for navigating users back to the app.
///
/// \param callback KlarnaExpressCheckoutButtonCallback object to get notified of key events happening to a product in a Klarna component
///
/// \param locale Localization, list of supported locales
/// https://docs.klarna.com/klarna-payments/before-you-start/data-requirements/puchase-countries-currencies-locales/#data-mapping
///
/// \param styleConfiguration Style configuration for the button including button theme, button shape and if the button is outlined or not.
/// Default theme is <code>DARK</code>, default shape is <code>ROUNDED_RECT</code> and default style is <code>FILLED</code>.
///
/// \param environment KlarnaEnvironment object to set the mode of SDK to run in
///
/// \param region KlarnaRegion object to set the geographic region for SDK’s API requests
///
/// \param theme KlarnaTheme object to set the theme for components
///
/// \param resourceEndpoint KlarnaResourceEndpoint object to set the resources endpoint configuration for the SDK
///
/// \param loggingLevel The SDK’s logging level
///
SWIFT_CLASS("_TtC15KlarnaMobileSDK34KlarnaExpressCheckoutButtonOptions")
@interface KlarnaExpressCheckoutButtonOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Style configuration for the Klarna Express Checkout button.
/// \param theme The theme of the button
///
/// \param shape The shape of the button
///
/// \param style The style of the button
///
SWIFT_CLASS("_TtC15KlarnaMobileSDK45KlarnaExpressCheckoutButtonStyleConfiguration")
@interface KlarnaExpressCheckoutButtonStyleConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options for configuring a Klarna Express Checkout session.
SWIFT_CLASS("_TtC15KlarnaMobileSDK35KlarnaExpressCheckoutSessionOptions")
@interface KlarnaExpressCheckoutSessionOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// \param clientId Partner client ID from Merchant Portal.
///
/// \param autoFinalize If true, the session will be automatically finalized after the user authorizes the payment.
///
/// \param collectShippingAddress If true, the session will collect shipping address information.
///
/// \param sessionData session data to be passed to the backend.
///
SWIFT_CLASS("_TtCC15KlarnaMobileSDK35KlarnaExpressCheckoutSessionOptions17ClientSideSession")
@interface ClientSideSession : KlarnaExpressCheckoutSessionOptions
@end

/// \param clientToken Client token generated by the backend for the server-side session. 
///
/// \param autoFinalize If true, the session will be automatically finalized after the user authorizes the payment.
///
/// \param collectShippingAddress If true, the session will collect shipping address information.
///
/// \param sessionData Optional session data to be passed to the backend.
///
SWIFT_CLASS("_TtCC15KlarnaMobileSDK35KlarnaExpressCheckoutSessionOptions17ServerSideSession")
@interface ServerSideSession : KlarnaExpressCheckoutSessionOptions
@end

@protocol KlarnaWebView;
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK29KlarnaFullscreenEventListener_")
@protocol KlarnaFullscreenEventListener
/// Event to notify the merchant app that the supplied web view will present full-screen content
/// that it should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant app that full-screen content in the supplied web view is now
/// being displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it’s now displaying content in its orignal presentation.
/// \param webView Web biew presenting content in original format.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@class KlarnaError;
/// An object that will be notified of events happening to the web views <code>KlarnaHybridSDK</code> instance
/// is observing.
/// If you’re performinga hybrid integration, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaHybridSDK</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inWebView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK25KlarnaHybridEventListener_") SWIFT_DEPRECATED_MSG("Use KlarnaEventHandler and KlarnaFullscreenEventListener instead.")
@protocol KlarnaHybridEventListener <KlarnaFullscreenEventListener>
/// Event to notify merchant that an error occured during Hybrid SDK’s usage.
/// \param webView The web view the error occured in.
///
/// \param error Error details.
///
- (void)klarnaFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaError * _Nonnull)error;
@end

/// Klarna’s approach to integrating products with a “hybrid” approach: One in which Klarna’s
/// products are presented inside a merchant-owned web view.
SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaHybridSDK")
@interface KlarnaHybridSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class NSURLRequest;
@class KlarnaEvent;
@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Adds a web view that the SDK will keep track of until either the web view or the SDK is
/// dereferenced.
/// You may add multiple web views to the same instance.
/// \param webView Web view that the SDK will keep track of (<code>WKWebView</code>).
///
- (void)addWebView:(WKWebView * _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// Call should be perfomed in:
/// <code>webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</code>.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageLoadIn:(WKWebView * _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// warning:
/// Use <code>newPageLoad</code> from this same class instead.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageWillLoadIn:(WKWebView * _Nonnull)webView SWIFT_DEPRECATED_MSG("Use the `newPageLoad` instead.");
/// Verify with the SDK whether a request/navigation should be performed in the web view.
/// Checking should be perfomed in:
/// <code>webView(_: decidePolicyFor: decisionHandler:)</code> with the <code>navigationAction</code>’s <code>request</code> property.
/// note:
///
/// If it is a page Klarna recognizes as one of its own (e.g. Klarna’s financing terms), the SDK
/// will return <code>false</code>. You should then block this navigation.
/// If it’s a page Klarna doesn’t recognize, it’ll fall back to returning <code>true</code>. Your app should
/// determine whether it wants to load the URL through its own heuristics.
/// \param request Request the web view will be performing.
///
///
/// returns:
/// Whether the SDK deems that this navigation should be blocked or not.
- (BOOL)shouldFollowNavigationWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the SDK’s Device ID for the app install.
/// warning:
/// This method is deprecated. Use the static method from <code>KlarnaMobileSDK</code> with the
/// same name.
///
/// returns:
/// a unique ID, persistent throughout the app’s installation.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Do not use.");
/// To be called when the application is re-opened from a third-party application while the SDK
/// is running.
/// warning:
/// This method is deprecated. The SDK does not require it anymore.
/// \param url URL that is passed in through deep link.
///
/// \param options Additional system-provided parameters (like source application bundle ID)
///
+ (void)handleDeeplinkWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_DEPRECATED_MSG("SDK does not need this to be called anymore. Will be removed in future releases.");
/// Adds a callback that the SDK will call if Klarna needs to send arbitrary information that will be forward to the merchant.
/// \param callback Closure to handle message events sent to merchants.
///
- (void)registerEventListenerWithCallback:(void (^ _Nonnull)(KlarnaEvent * _Nonnull))callback SWIFT_DEPRECATED_MSG("Replaced with implementing KlarnaEventHandler set as EventHandler.");
@end

@class KlarnaProductOptions;
@protocol KlarnaEventListener;
@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Arbitrary data as string that will be sent to Klarna components in handshake with the SDK.
@property (nonatomic, copy) NSString * _Nullable klarnaInitData SWIFT_DEPRECATED_MSG("This has been replaced with KlarnaProductOptions to accommodate more options.");
@property (nonatomic, readonly, strong) KlarnaProductOptions * _Nonnull productOptions;
@property (nonatomic, strong) id <KlarnaFullscreenEventListener> _Nullable fullscreenEventListener;
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventListener A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventListener:(id <KlarnaEventListener> _Nonnull)klarnaEventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventListener:(id <KlarnaEventListener> _Nonnull)klarnaEventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventHandler A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventHandler:(id <KlarnaEventHandler> _Nonnull)klarnaEventHandler resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventHandler A listener that will receive events from the SDK.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventHandler:(id <KlarnaEventHandler> _Nonnull)klarnaEventHandler environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
@end

@class KlarnaProductEvent;
@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaMultiComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull enabledProducts;
- (void)sendEvent:(KlarnaProductEvent * _Nonnull)event;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaHybridSDKDebug")
@interface KlarnaHybridSDKDebug : KlarnaHybridSDK
@end

/// On Site Messaging placement style configuration.
SWIFT_CLASS("_TtC15KlarnaMobileSDK27KlarnaOSMStyleConfiguration")
@interface KlarnaOSMStyleConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class KlarnaTextStyleConfiguration;
SWIFT_CLASS_NAMED("Builder")
@interface KlarnaOSMStyleBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)setBackgroundColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setTextStyleConfiguration:(KlarnaTextStyleConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
- (KlarnaOSMStyleConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

@class UIViewController;
SWIFT_CLASS("_TtC15KlarnaMobileSDK13KlarnaOSMView")
@interface KlarnaOSMView : UIView
/// View controller (or activity) that will be used to render placement
/// details modally (required). Would be <code>hostActivity</code> on Android.
@property (nonatomic, weak) UIViewController * _Nullable hostViewController;
/// Style configuration for the KlarnaOSMView. When not nil it will take precedence over the Theme values and support for dark mode needs to be implemented.
@property (nonatomic, strong) KlarnaOSMStyleConfiguration * _Nullable styleConfiguration;
/// Initialize OSM view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end

@interface KlarnaOSMView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@protocol KlarnaOSMViewEventListener;
@class NSNumber;
@interface KlarnaOSMView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Merchant’s Client ID (required)
@property (nonatomic, copy) NSString * _Nullable clientId;
/// Merchant’s Placement’s Key (required)
@property (nonatomic, copy) NSString * _Nullable placementKey;
/// Locale for the placement language (required, defaults to en-us).
@property (nonatomic, copy) NSString * _Nonnull locale;
/// Event listener for OSM View.
@property (nonatomic, weak) id <KlarnaOSMViewEventListener> _Nullable delegate SWIFT_DEPRECATED_MSG("Set a KlarnaSizingDelegate on sizingDelegate instead.");
/// Initialize OSM view.
- (nonnull instancetype)init;
/// Initialize OSM view.
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithResourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Initialize OSM view.
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
- (void)setPurchaseAmount:(NSNumber * _Nullable)amount;
/// Renders the content in the view. If already rendered, the view will update (or restyle) its contents
/// instead.
/// warning:
/// To be called only after <code>clientId</code>, <code>placementKey</code>, <code>purchaseAmount</code>,
/// <code>environment</code> and <code>region</code>  properties are set.
/// An error will set in the callback if:
/// <ul>
///   <li>
///     If a property is missing
///   </li>
///   <li>
///     If rendering placements is disabled for you
///   </li>
///   <li>
///     If a property is invalid
///   </li>
/// </ul>
/// \param callback Merchant-supplied callback to be used when placement is
/// rendered or an error occurs. Called on main thread.
///
- (void)renderWithCallback:(void (^ _Nonnull)(KlarnaError * _Nullable))callback;
/// Renders the content in the view. If already rendered, the view will update (or restyle) its contents
/// instead.
/// warning:
/// To be called only after <code>clientId</code>, <code>placementKey</code>, <code>purchaseAmount</code>,
/// <code>environment</code> and <code>region</code>  properties are set.
/// An error will be sent to KlarnaEventHandler if:
/// <ul>
///   <li>
///     If a property is missing
///   </li>
///   <li>
///     If rendering placements is disabled for you
///   </li>
///   <li>
///     If a property is invalid
///   </li>
/// </ul>
- (void)render;
@end

@interface KlarnaOSMView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

/// An object that will be notified of events happening to a <code>KlarnaOSMView</code>
/// If you’re integrating KlarnaOSMView inside a view that needs to specify the content height,
/// you’ll need to implement an instance of this listener.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaOSMViewEventListener_") SWIFT_DEPRECATED_MSG("Implement KlarnaSizingDelegate instead.")
@protocol KlarnaOSMViewEventListener
- (void)klarnaOSMViewResized:(CGFloat)height;
@end

@class KlarnaPaymentView;
@class KlarnaPaymentError;
/// An object that will be notified of events happening to a <code>KlarnaPaymentView</code>
/// If you’re integrating Klarna Payments natively, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaPaymentView</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inPaymentView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaPaymentEventListener_")
@protocol KlarnaPaymentEventListener
/// The <code>initialize()</code> function for this payment view was successful.
/// You can follow up by calling <code>load()</code> to render details for this method, or if this payment
/// method is already authorized, <code>loadPaymentReview()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was initialized.
///
- (void)klarnaInitializedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>load()</code> function for this payment view was successful.
/// Payment view should be visible now. If the user chooses to pay with the payment method in
/// this view, call <code>authorize()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was loaded.
///
- (void)klarnaLoadedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>loadPaymentReview()</code> function for this payment view was successful.
/// Payment view is rendering a description of what the payment method that was authorized.
/// \param paymentView The <code>KlarnaPaymentView</code> that renders a payment review.
///
- (void)klarnaLoadedPaymentReviewWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// An authorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// note:
/// This method being called doesn’t necessarily mean that it was successful. You might need
/// to call <code>finalize()</code>, you might need to correct an error or there might be a fatal error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the authorized payment method.
///
/// \param approved Is the session approved? If true, you should also get an <code>authToken</code>.
///
/// \param authToken Authorization token.
///
/// \param finalizeRequired If true, <code>finalize()</code> needs to be called.
///
- (void)klarnaAuthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken finalizeRequired:(BOOL)finalizeRequired;
/// A reauthorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// If the order is changed after this point. Call the view’s <code>reauthorize()</code> instead
/// of calling <code>authorize()</code> again.
/// note:
/// This method being called doesn’t mean that it was necessarily successful. If <code>klarnaAuthorized()</code>
/// previously returned true for <code>finalizeRequired</code>, you need to still call <code>finalize()</code>. There
/// might also be an error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the reauthorized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaReauthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// The session for the payment method in this view has performed a finalize.
/// If it’s approved and you have an authorization token, you can create an order.
/// note:
/// You need to check for the <code>authToken</code> to make sure the session is finalized.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the finalized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaFinalizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// Called when a Payment View resized internally.
/// Update your constraints (or whatever solution you have) to match the layout.
/// \param paymentView The <code>KlarnaPaymentView</code> that resized.
///
/// \param newHeight The new height in points.
///
- (void)klarnaResizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView to:(CGFloat)newHeight;
/// Called if an error occured during some part of the flow.
/// If the error’s <code>invalidFields</code> property contains field names and the error isn’t fatal, you can:
/// <ol>
///   <li>
///     Prompt the user to get updated info for those fields.
///   </li>
///   <li>
///     Call the same method with those updated fields as additional data.
///   </li>
/// </ol>
/// warning:
/// Errors may or may not be fatal. If the error is fatal the <code>KlarnaPaymentView</code> should not be
/// displayed anymore.
/// \param paymentView The <code>KlarnaPaymentView</code> that the error occured in.
///
/// \param error Error that occurred.
///
- (void)klarnaFailedInPaymentView:(KlarnaPaymentView * _Nonnull)paymentView withError:(KlarnaPaymentError * _Nonnull)error;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK17KlarnaPaymentView")
@interface KlarnaPaymentView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didMoveToWindow;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
@end

@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initialize the <code>KlarnaPaymentView</code>.
/// \param clientToken Client token received from Klarna when creating the session.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken returnUrl:(NSURL * _Nonnull)returnUrl;
/// Initialize the <code>KlarnaPaymentView</code>.
/// \param clientToken Client token received from Klarna when creating the session.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken;
/// Performs a pre-assessment for this payment method category. Loads content into the
/// <code>KlarnaPaymentView</code>.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// \param jsonData An optional string with order data to update the session. Formatted as JSON.
///
- (void)loadWithJsonData:(NSString * _Nullable)jsonData;
/// Renders an overview of the payment terms that have been authorized.
/// If your checkout offers the customer an opportunity to review the order after the payment
/// step (e.g. an order review page) it can make sense to present the payment method the customer
/// selected on a previous page.
/// This gives the customer a change to review the payment method and its terms to the user.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// note:
///
/// Currently only specific payment methods and countries may be supported.
/// warning:
///
/// The session should be authorized.
- (void)loadPaymentReview;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param autoFinalize An optional flag used to turn off auto-finalization for the direct bank transfer payment method.
///
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithAutoFinalize:(BOOL)autoFinalize jsonData:(NSString * _Nullable)jsonData;
/// Reauthorizes the session.
/// Call this if session details (order or customer info) have changed after authorization.
/// Merchant’s delegate will be called with successful/unsuccessful result of reauthorization.
/// \param jsonData An optional json string to update the session.
///
- (void)reauthorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Finalizes the session.
/// Call this if you called <code>authorize()</code> with <code>autoFinalize</code> set to <code>false</code> and results in
/// <code>finalizeRequired</code> with a <code>true</code> value.
/// Merchant’s delegate will be called with successful/unsuccessful result of finalization.
/// note:
///
/// Method is called <code>finalise</code> with an “s” to avoid conflicts with the <code>NSObject</code> method of
/// the same name.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)finaliseWithJsonData:(NSString * _Nullable)jsonData;
@end

@class KlarnaPaymentOptions;
@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Payment method category this view will be / is displaying.
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Informs whether this <code>KlarnaPaymentView</code> should be displayed to the customer.
/// Will be false until a successful load() call has been performed.
@property (nonatomic, readonly) BOOL isLoaded;
/// Informs whether this PaymentView’s content is loaded.
/// True by default. Once it becomes false, it will not become true again.
@property (nonatomic, readonly) BOOL isAvalable;
/// Options for Klarna Payments integration
@property (nonatomic, readonly, strong) KlarnaPaymentOptions * _Nonnull paymentOptions;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param eventListener A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener object that will receive events from this view.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param eventListener A listener object that will receive events from this view.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventListener A listener object that will receive events from this view.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
@end

@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK22KlarnaPaymentViewDebug")
@interface KlarnaPaymentViewDebug : KlarnaPaymentView
@end

@class KlarnaPostPurchaseSDK;
@class KlarnaPostPurchaseError;
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK31KlarnaPostPurchaseEventListener_")
@protocol KlarnaPostPurchaseEventListener
- (void)onAuthorizeRequestedWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK;
- (void)onInitializedWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK;
- (void)onRenderedOperationWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK result:(enum KlarnaPostPurchaseRenderResult)result;
- (void)onErrorWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK error:(KlarnaPostPurchaseError * _Nonnull)error;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK21KlarnaPostPurchaseSDK")
@interface KlarnaPostPurchaseSDK : NSObject
/// Internal initializer.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Create a Klarna Post Purchase Instance with the specified parameters.
/// Use this method when creating a PostPurchaseSDK object.
/// This method is the designated initializer.
/// \param environment The PostPurchaseSDK specific environment (e.g. staging). For possible values check <code>KlarnaEnvironment</code>
///
/// \param region The PostPurchaseSDK specific region (e.g. EU). For possible values check <code>KlarnaRegion</code>
///
/// \param listener An object that will receive events from this PostPurchaseSDK instance.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region listener:(id <KlarnaPostPurchaseEventListener> _Nonnull)listener;
/// Create a Klarna Post Purchase Instance with the specified parameters.
/// Use this method when creating a PostPurchaseSDK object.
/// This method is the designated initializer.
/// \param environment The PostPurchaseSDK specific environment (e.g. staging). For possible values check <code>KlarnaEnvironment</code>
///
/// \param region The PostPurchaseSDK specific region (e.g. EU). For possible values check <code>KlarnaRegion</code>
///
/// \param resourceEndpoint The PostPurchaseSDK with an alternative endpoint. For possible values check <code>KlarnaResourceEndpoint</code>
///
/// \param listener An object that will receive events from this PostPurchaseSDK instance.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint listener:(id <KlarnaPostPurchaseEventListener> _Nonnull)listener;
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initializes the Post Purchase Instance.
/// After creating the Post Purchase SDK instance this is the next method to call.
/// It will initialize the instance properties and assets required
/// \param locale Localization, list of supported locales can be found in https://docs.klarna.com/in-app/inapp-ios-overview/post-purchase/
///
/// \param purchaseCountry Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param design Optional design identifier.
///
- (void)initializeWithLocale:(NSString * _Nonnull)locale purchaseCountry:(NSString * _Nonnull)purchaseCountry design:(NSString * _Nullable)design;
/// Authorize the Post Purchase Instance.
/// After receiving the initialized successful callback, the next step is to authorize the user with Klarna to access the Post Purchase information
/// important:
/// Only call this after you get a <em>success</em> callback in the <em>onInitialized</em> delegate method.
/// \param clientId The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param scope The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param redirectUri The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param locale The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param loginHint The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param responseType The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
- (void)authorizationRequestWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope redirectUri:(NSString * _Nonnull)redirectUri locale:(NSString * _Nullable)locale state:(NSString * _Nullable)state loginHint:(NSString * _Nullable)loginHint responseType:(NSString * _Nullable)responseType;
/// Render the Post Purchase flow.
/// This method causes to launch and load the PostPurchaseSDK view in <em>full screen mode</em>.
/// \param operationToken Token received from Klarna after the auth code exchange
///
/// \param locale Localization, list of supported locales can be found in https://docs.klarna.com/in-app/inapp-ios-overview/post-purchase/
///
/// \param redirectUri Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)renderOperationWithOperationToken:(NSString * _Nonnull)operationToken locale:(NSString * _Nullable)locale redirectUri:(NSString * _Nullable)redirectUri;
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
/// Replace the listener passed on initialization of the Post Purchase SDK
/// This method replaces the listener passed during initialization of the Post Purchase SDK.
/// The listener must adopt the KlarnaPostPurchaseEventListener protocol. This object is responsible for receiving events with results of the Post Purchase SDK API functions executions.
/// important:
/// There can be one delegate assigned for each Post Purchase SDK instance
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@end

enum KlarnaSignInButtonLogoAlignment : NSInteger;
@protocol ASWebAuthenticationPresentationContextProviding;
@protocol KlarnaSignInTokenizationDelegate;
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaSignInButton") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton : UIControl
/// Defines the theme (or style) of the buttons. For possible options, see <code>KlarnaButtonTheme</code>.
@property (nonatomic) enum KlarnaButtonTheme buttonTheme;
/// Defines the shape of the button. For other values, see <code>KlarnaButtonShape</code>.
@property (nonatomic) enum KlarnaButtonShape buttonShape;
/// Defines the content of the button. For alternatives, see <code>KlarnaButtonLabel</code>.
@property (nonatomic) enum KlarnaButtonLabel buttonLabel;
@property (nonatomic) enum KlarnaSignInButtonLogoAlignment buttonLogoAlignment;
/// Creates a an instance of this button.
/// note:
/// More information about presentation context <a href="https://developer.apple.com/documentation/authenticationservices/aswebauthenticationpresentationcontextproviding">here</a>.
/// note:
/// The view will be initialized with frame <code>.zero</code>, auto layout is the recommended way to
/// manage its layout.
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param theme Defines the theme (or style) of the sign-in components <em>Note: (not the button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Allows the SDK to make requests against an alternative cloud provider. Do not set unless absolutely necessary.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
/// \param loggingLevel Level at which the SDK will log events at.
///
/// \param tokenizationDelegate delegate to inform Merchant app to get the tokenizationId
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext theme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel tokenizationDelegate:(id <KlarnaSignInTokenizationDelegate> _Nullable)tokenizationDelegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton (SWIFT_EXTENSION(KlarnaMobileSDK))
/// This is the UUID you get when creating your Klarna OAuth 2.0 app.
@property (nonatomic, copy) NSString * _Nullable clientId;
/// Space-separated list of scopes you would like to request from the user.
@property (nonatomic, copy) NSString * _Nullable scope;
/// The market or the country where this integration is available.
@property (nonatomic, copy) NSString * _Nullable market;
/// The language to be presented to the user.
@property (nonatomic, copy) NSString * _Nullable locale;
/// Creates a Klarna Sign-In Button Instance
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a Klarna Sign-In Button Instance
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a Klarna Sign-In Button Instance
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param theme Defines the theme (or style) of the sign-in components <em>Note: (not the button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext theme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton (SWIFT_EXTENSION(KlarnaMobileSDK))
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK23KlarnaSignInButtonDebug") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButtonDebug : KlarnaSignInButton
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext theme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel tokenizationDelegate:(id <KlarnaSignInTokenizationDelegate> _Nullable)tokenizationDelegate OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KlarnaSignInButtonLogoAlignment, open) {
  KlarnaSignInButtonLogoAlignmentLeft = 0,
  KlarnaSignInButtonLogoAlignmentCenter = 1,
};

SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaSignInSDK") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDK : NSObject
/// Creates an instance of KlarnaSignInSDK
/// \param theme Defines the theme (or style) of the sign-in components <em>Note: (not the button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Allows the SDK to make requests against an alternative cloud provider. Do not set unless absolutely necessary.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
/// \param loggingLevel Level at which the SDK will log events at.
///
- (nonnull instancetype)initWithTheme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel OBJC_DESIGNATED_INITIALIZER;
/// Sign in the user with the supplied parameters.
/// note:
/// More information about presentation context <a href="https://developer.apple.com/documentation/authenticationservices/aswebauthenticationpresentationcontextproviding">here</a>.
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param tokenizationId The id to enable Tokenization
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
- (void)signInClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nullable)locale tokenizationId:(NSString * _Nullable)tokenizationId presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Creates a KlarnaSignInSDK Instance
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a KlarnaSignInSDK Instance
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a KlarnaSignInSDK Instance
/// \param theme Defines the theme (or style) that web component <em>(Not Klarna Sign-In Button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithTheme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaSignInSDKDebug") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDKDebug : KlarnaSignInSDK
- (nonnull instancetype)initWithTheme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK32KlarnaSignInTokenizationDelegate_")
@protocol KlarnaSignInTokenizationDelegate
- (void)onTokenization:(id <KlarnaComponent> _Nonnull)klarnaComponent completionHandler:(void (^ _Nonnull)(NSString * _Nonnull))completionHandler;
@end

@protocol KlarnaStandaloneWebViewDelegate;
SWIFT_CLASS("_TtC15KlarnaMobileSDK23KlarnaStandaloneWebView")
@interface KlarnaStandaloneWebView : UIView
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic, strong) id <KlarnaStandaloneWebViewDelegate> _Nullable delegate;
/// Creates a <code>KlarnaStandaloneWebView</code>
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>KlarnaStandaloneWebView</code>
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@interface KlarnaStandaloneWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaMultiComponent>
@property (nonatomic, readonly, strong) KlarnaProductOptions * _Nonnull productOptions;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull enabledProducts;
- (void)sendEvent:(KlarnaProductEvent * _Nonnull)event;
@end

@interface KlarnaStandaloneWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

@class WKNavigation;
@class WKFrameInfo;
@class WKUserScript;
@protocol WKScriptMessageHandler;
@class WKContentWorld;
@protocol WKScriptMessageHandlerWithReply;
@interface KlarnaStandaloneWebView (SWIFT_EXTENSION(KlarnaMobileSDK))
- (WKNavigation * _Nullable)loadURLRequest:(NSURLRequest * _Nonnull)request;
- (WKNavigation * _Nullable)loadURL:(NSURL * _Nonnull)url;
- (WKNavigation * _Nullable)loadFileURL:(NSURL * _Nonnull)url allowingReadAccessTo:(NSURL * _Nonnull)readAccessUrl;
- (WKNavigation * _Nullable)loadHTML:(NSString * _Nonnull)htmlString withBaseURL:(NSURL * _Nullable)baseUrl;
- (WKNavigation * _Nullable)reload;
- (WKNavigation * _Nullable)reloadFromOrigin;
- (void)stopLoading;
- (WKNavigation * _Nullable)goBack;
- (WKNavigation * _Nullable)goForward;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) BOOL isLoading;
@property (nonatomic, readonly) BOOL canGoForward;
@property (nonatomic, readonly) BOOL canGoBack;
@property (nonatomic, readonly) CGSize contentSize;
@property (nonatomic) BOOL isInspectable;
@property (nonatomic, strong) UIColor * _Nonnull underPageBackgroundColor SWIFT_AVAILABILITY(ios,introduced=15.0);
@property (nonatomic) BOOL allowsBackForwardAnimationGestures;
@property (nonatomic) BOOL allowsLinkPreview;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, getter=isOpaque) BOOL opaque;
- (void)evaluateJavaScript:(NSString * _Nonnull)javaScript frame:(WKFrameInfo * _Nullable)frame completion:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completion;
- (void)addUserScript:(WKUserScript * _Nonnull)script;
- (void)removeAllUserScripts;
@property (nonatomic, readonly, copy) NSArray<WKUserScript *> * _Nonnull userScripts;
- (void)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler named:(NSString * _Nonnull)name to:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler named:(NSString * _Nonnull)name;
- (void)addScriptMessageHandlerWithReply:(id <WKScriptMessageHandlerWithReply> _Nonnull)scriptMessageHandlerWithReply named:(NSString * _Nonnull)name to:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)removeScriptMessageHandlerWithNamed:(NSString * _Nonnull)name from:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)removeScriptMessageHandlerWithNamed:(NSString * _Nonnull)name;
- (void)removeAllScriptMessageHandlersFrom:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)removeAllScriptMessageHandlers;
@property (nonatomic, readonly, copy) NSArray<id <WKScriptMessageHandler>> * _Nonnull scriptMessageHandlers;
@property (nonatomic, readonly, copy) NSArray<id <WKScriptMessageHandlerWithReply>> * _Nonnull scriptMessageHandlersWithReply;
@property (nonatomic) BOOL cachingEnabled;
- (void)clearCache;
- (void)clearCookies;
@end

@class WKNavigationResponse;
@class WKNavigationAction;
@class WKWebViewConfiguration;
@class WKWindowFeatures;
@class WKSecurityOrigin;
/// This is the single delegate that you can implement to observe events in the web view.
/// It’s a combination of <code>WKNavigationDelegate</code> and <code>WKUIDelegate</code>. Its functions behave the
/// same way as the originals, but we cut down on what we expose to only the most important and make
/// naming a bit more consistent.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK31KlarnaStandaloneWebViewDelegate_")
@protocol KlarnaStandaloneWebViewDelegate <NSObject>
@optional
/// Asks the delegate for permission to navigate to new content after the response is known.
/// Use this to allow or deny a request <em>after</em> the web view receives the response to the original
/// URL request. The <code>navigationResponse</code> contains the details of the response, including the
/// type of data it contains.
/// warning:
/// If this function is implemented, the handler needs to be called, even if only with <code>handler(.allow)</code>.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView decidePolicyFor:(WKNavigationResponse * _Nonnull)navigationResponse handler:(SWIFT_NOESCAPE void (^ _Nonnull)(WKNavigationResponsePolicy))handler;
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView decidePolicyFor:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
/// Invoked when a main frame navigation starts.
/// The web view calls this method after it receives provisional approval to process a navigation
/// request, but before it receives a response to that request.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Nonnull)navigation;
/// Invoked when a server redirect is received for the main frame.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didReceiveRedirectForProvisionalNavigation:(WKNavigation * _Nonnull)navigation;
/// Invoked when content starts arriving for the main frame.
/// After the delegate’s <code>klarnaStandaloneWebView(_:decidePolicyFor...</code> method
/// approves the response, the web view begins processing it. The web view calls this method
/// immediately before it starts to update the main frame.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didCommit:(WKNavigation * _Nonnull)navigation;
/// Invoked when a main frame navigation completes.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didFinish:(WKNavigation * _Nonnull)navigation;
/// Invoked when an error occurs while starting to load data for the main frame.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Nonnull)navigation withError:(NSError * _Nonnull)error;
/// Invoked when an error occurs during a committed main frame navigation.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didFail:(WKNavigation * _Nonnull)navigation withError:(NSError * _Nonnull)error;
/// Will be called when a navigation requesting a new tab or window occurs in the web view.
/// You can either:
/// <ul>
///   <li>
///     Return a new <code>WKWebView</code>, in which case content will be loaded there (for example if you have an internal browser with a WKWebView that you can use).
///   </li>
///   <li>
///     Return <code>nil</code> and open the URL in <code>navigationAction.request</code> in the system browser - however session data might be lost.
///   </li>
///   <li>
///     Return <code>nil</code> and the navigation will simply be blocked.
///   </li>
/// </ul>
- (WKWebView * _Nullable)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView createWebViewWith:(WKWebViewConfiguration * _Nonnull)configuration forNavigation:(WKNavigationAction * _Nonnull)navigationAction withFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
/// Determines whether a web resource, which the security origin object describes, can access the
/// device’s microphone audio and camera video.
/// warning:
/// Default behavior if this function is not implemented is to call the handler with
/// <code>.prompt</code> (i.e., to prompt the user).
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView requestMediaCapturePermissionFor:(WKSecurityOrigin * _Nonnull)origin initiatedByFrame:(WKFrameInfo * _Nonnull)frame ofType:(WKMediaCaptureType)type handler:(void (^ _Nonnull)(WKPermissionDecision))handler SWIFT_AVAILABILITY(ios,introduced=15.0);
@end

typedef SWIFT_ENUM(NSInteger, KlarnaWebViewOpeningBehavior, open) {
  KlarnaWebViewOpeningBehaviorDelegate = 0,
  KlarnaWebViewOpeningBehaviorIgnore = 1,
  KlarnaWebViewOpeningBehaviorNavigate = 2,
  KlarnaWebViewOpeningBehaviorSystemBrowser = 3,
  KlarnaWebViewOpeningBehaviorInternalBrowser = 4,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef KLARNAMOBILESDK_SWIFT_H
#define KLARNAMOBILESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import KlarnaCore;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSCoder;
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaCheckoutView")
@interface KlarnaCheckoutView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didMoveToWindow;
@end

@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@class NSString;
@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Set the HTML snippet that you get from Klarna when creating an order to load Klarna Checkout
/// into this view.
/// \param snippet the HTML snippet that will be rendered in this view.
///
- (void)setSnippet:(NSString * _Nullable)snippet;
/// Signals checkout to suspend the checkout process. Customers won’t be able to operate on the
/// checkout view.
- (void)suspend;
/// Signals checkout to resume operations. It may do a backend check on the order state.
- (void)resume;
@end

@class KlarnaCheckoutOptions;
@class NSURL;
@protocol KlarnaEventHandler;
@class KlarnaEnvironment;
@class KlarnaRegion;
@class KlarnaResourceEndpoint;
@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Options for Klarna Checkout integration
@property (nonatomic, readonly, strong) KlarnaCheckoutOptions * _Nullable checkoutOptions;
/// Create a Klarna Checkout View
/// note:
///
/// Klarna checkout view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param returnURL Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventHandler A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Create a Klarna Checkout View
/// note:
///
/// Klarna checkout view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param returnURL Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventHandler A listener that will receive events from the SDK.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Optional value that initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Create a Klarna Checkout View
/// note:
///
/// Klarna checkout view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param returnURL Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventHandler A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Optional value that initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
@end

@protocol KlarnaSizingDelegate;
@class UIScrollView;
@interface KlarnaCheckoutView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK23KlarnaCheckoutViewDebug")
@interface KlarnaCheckoutViewDebug : KlarnaCheckoutView
@end

@class UITraitCollection;
SWIFT_CLASS("_TtC15KlarnaMobileSDK19KlarnaExpressButton")
@interface KlarnaExpressButton : UIControl
@property (nonatomic) enum KlarnaButtonTheme buttonTheme;
@property (nonatomic) enum KlarnaButtonShape buttonShape;
@property (nonatomic) enum KlarnaButtonLabel buttonLabel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@interface KlarnaExpressButton (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@interface KlarnaExpressButton (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Merchant identification (MID) code assigned to every merchant using Klarna.
@property (nonatomic, readonly, copy) NSString * _Nullable clientId;
/// Localization, list of supported locales can be found in https://docs.klarna.com/express-button/availiability/.
@property (nonatomic, readonly, copy) NSString * _Nonnull locale;
/// Create a Klarna Express Button
/// note:
///
/// Klarna Express Button view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param clientId Merchant identification (MID)
///
/// \param locale Localization
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaExpressButton instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId locale:(NSString * _Nonnull)locale returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Create a Klarna Express Button
/// note:
///
/// Klarna Express Button view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// \param clientId Merchant identification (MID)
///
/// \param locale Localization
///
/// \param buttonTheme Customization of the theme appearance.
///
/// \param buttonShape Customization of the shape appearance.
///
/// \param buttonLabel Customization of the label appearance.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaExpressButton instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId locale:(NSString * _Nonnull)locale buttonTheme:(enum KlarnaButtonTheme)buttonTheme buttonShape:(enum KlarnaButtonShape)buttonShape buttonLabel:(enum KlarnaButtonLabel)buttonLabel returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
@end

@interface KlarnaExpressButton (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK24KlarnaExpressButtonDebug")
@interface KlarnaExpressButtonDebug : KlarnaExpressButton
@end

@class KlarnaExpressCheckoutButtonOptions;
@class UITouch;
@class UIEvent;
SWIFT_CLASS("_TtC15KlarnaMobileSDK27KlarnaExpressCheckoutButton")
@interface KlarnaExpressCheckoutButton : UIControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithOptions:(KlarnaExpressCheckoutButtonOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK48KlarnaExpressCheckoutButtonAuthorizationResponse")
@interface KlarnaExpressCheckoutButtonAuthorizationResponse : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options for configuring the Klarna Express Checkout button.
/// \param sessionOptions Authorization params object with default values of each param.
///
/// \param returnURL The return URL which should be used for navigating users back to the app.
///
/// \param callback KlarnaExpressCheckoutButtonCallback object to get notified of key events happening to a product in a Klarna component
///
/// \param locale Localization, list of supported locales
/// https://docs.klarna.com/klarna-payments/before-you-start/data-requirements/puchase-countries-currencies-locales/#data-mapping
///
/// \param styleConfiguration Style configuration for the button including button theme, button shape and if the button is outlined or not.
/// Default theme is <code>DARK</code>, default shape is <code>ROUNDED_RECT</code> and default style is <code>FILLED</code>.
///
/// \param environment KlarnaEnvironment object to set the mode of SDK to run in
///
/// \param region KlarnaRegion object to set the geographic region for SDK’s API requests
///
/// \param theme KlarnaTheme object to set the theme for components
///
/// \param resourceEndpoint KlarnaResourceEndpoint object to set the resources endpoint configuration for the SDK
///
/// \param loggingLevel The SDK’s logging level
///
SWIFT_CLASS("_TtC15KlarnaMobileSDK34KlarnaExpressCheckoutButtonOptions")
@interface KlarnaExpressCheckoutButtonOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Style configuration for the Klarna Express Checkout button.
/// \param theme The theme of the button
///
/// \param shape The shape of the button
///
/// \param style The style of the button
///
SWIFT_CLASS("_TtC15KlarnaMobileSDK45KlarnaExpressCheckoutButtonStyleConfiguration")
@interface KlarnaExpressCheckoutButtonStyleConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options for configuring a Klarna Express Checkout session.
SWIFT_CLASS("_TtC15KlarnaMobileSDK35KlarnaExpressCheckoutSessionOptions")
@interface KlarnaExpressCheckoutSessionOptions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// \param clientId Partner client ID from Merchant Portal.
///
/// \param autoFinalize If true, the session will be automatically finalized after the user authorizes the payment.
///
/// \param collectShippingAddress If true, the session will collect shipping address information.
///
/// \param sessionData session data to be passed to the backend.
///
SWIFT_CLASS("_TtCC15KlarnaMobileSDK35KlarnaExpressCheckoutSessionOptions17ClientSideSession")
@interface ClientSideSession : KlarnaExpressCheckoutSessionOptions
@end

/// \param clientToken Client token generated by the backend for the server-side session. 
///
/// \param autoFinalize If true, the session will be automatically finalized after the user authorizes the payment.
///
/// \param collectShippingAddress If true, the session will collect shipping address information.
///
/// \param sessionData Optional session data to be passed to the backend.
///
SWIFT_CLASS("_TtCC15KlarnaMobileSDK35KlarnaExpressCheckoutSessionOptions17ServerSideSession")
@interface ServerSideSession : KlarnaExpressCheckoutSessionOptions
@end

@protocol KlarnaWebView;
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK29KlarnaFullscreenEventListener_")
@protocol KlarnaFullscreenEventListener
/// Event to notify the merchant app that the supplied web view will present full-screen content
/// that it should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant app that full-screen content in the supplied web view is now
/// being displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it’s now displaying content in its orignal presentation.
/// \param webView Web biew presenting content in original format.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@class KlarnaError;
/// An object that will be notified of events happening to the web views <code>KlarnaHybridSDK</code> instance
/// is observing.
/// If you’re performinga hybrid integration, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaHybridSDK</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inWebView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK25KlarnaHybridEventListener_") SWIFT_DEPRECATED_MSG("Use KlarnaEventHandler and KlarnaFullscreenEventListener instead.")
@protocol KlarnaHybridEventListener <KlarnaFullscreenEventListener>
/// Event to notify merchant that an error occured during Hybrid SDK’s usage.
/// \param webView The web view the error occured in.
///
/// \param error Error details.
///
- (void)klarnaFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaError * _Nonnull)error;
@end

/// Klarna’s approach to integrating products with a “hybrid” approach: One in which Klarna’s
/// products are presented inside a merchant-owned web view.
SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaHybridSDK")
@interface KlarnaHybridSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class NSURLRequest;
@class KlarnaEvent;
@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Adds a web view that the SDK will keep track of until either the web view or the SDK is
/// dereferenced.
/// You may add multiple web views to the same instance.
/// \param webView Web view that the SDK will keep track of (<code>WKWebView</code>).
///
- (void)addWebView:(WKWebView * _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// Call should be perfomed in:
/// <code>webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</code>.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageLoadIn:(WKWebView * _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// warning:
/// Use <code>newPageLoad</code> from this same class instead.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageWillLoadIn:(WKWebView * _Nonnull)webView SWIFT_DEPRECATED_MSG("Use the `newPageLoad` instead.");
/// Verify with the SDK whether a request/navigation should be performed in the web view.
/// Checking should be perfomed in:
/// <code>webView(_: decidePolicyFor: decisionHandler:)</code> with the <code>navigationAction</code>’s <code>request</code> property.
/// note:
///
/// If it is a page Klarna recognizes as one of its own (e.g. Klarna’s financing terms), the SDK
/// will return <code>false</code>. You should then block this navigation.
/// If it’s a page Klarna doesn’t recognize, it’ll fall back to returning <code>true</code>. Your app should
/// determine whether it wants to load the URL through its own heuristics.
/// \param request Request the web view will be performing.
///
///
/// returns:
/// Whether the SDK deems that this navigation should be blocked or not.
- (BOOL)shouldFollowNavigationWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the SDK’s Device ID for the app install.
/// warning:
/// This method is deprecated. Use the static method from <code>KlarnaMobileSDK</code> with the
/// same name.
///
/// returns:
/// a unique ID, persistent throughout the app’s installation.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Do not use.");
/// To be called when the application is re-opened from a third-party application while the SDK
/// is running.
/// warning:
/// This method is deprecated. The SDK does not require it anymore.
/// \param url URL that is passed in through deep link.
///
/// \param options Additional system-provided parameters (like source application bundle ID)
///
+ (void)handleDeeplinkWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_DEPRECATED_MSG("SDK does not need this to be called anymore. Will be removed in future releases.");
/// Adds a callback that the SDK will call if Klarna needs to send arbitrary information that will be forward to the merchant.
/// \param callback Closure to handle message events sent to merchants.
///
- (void)registerEventListenerWithCallback:(void (^ _Nonnull)(KlarnaEvent * _Nonnull))callback SWIFT_DEPRECATED_MSG("Replaced with implementing KlarnaEventHandler set as EventHandler.");
@end

@class KlarnaProductOptions;
@protocol KlarnaEventListener;
@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Arbitrary data as string that will be sent to Klarna components in handshake with the SDK.
@property (nonatomic, copy) NSString * _Nullable klarnaInitData SWIFT_DEPRECATED_MSG("This has been replaced with KlarnaProductOptions to accommodate more options.");
@property (nonatomic, readonly, strong) KlarnaProductOptions * _Nonnull productOptions;
@property (nonatomic, strong) id <KlarnaFullscreenEventListener> _Nullable fullscreenEventListener;
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventListener A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventListener:(id <KlarnaEventListener> _Nonnull)klarnaEventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventListener:(id <KlarnaEventListener> _Nonnull)klarnaEventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventHandler A listener that will receive events from the SDK.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventHandler:(id <KlarnaEventHandler> _Nonnull)klarnaEventHandler resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param klarnaEventHandler A listener that will receive events from the SDK.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl klarnaEventHandler:(id <KlarnaEventHandler> _Nonnull)klarnaEventHandler environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
@end

@class KlarnaProductEvent;
@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaMultiComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull enabledProducts;
- (void)sendEvent:(KlarnaProductEvent * _Nonnull)event;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaHybridSDKDebug")
@interface KlarnaHybridSDKDebug : KlarnaHybridSDK
@end

/// On Site Messaging placement style configuration.
SWIFT_CLASS("_TtC15KlarnaMobileSDK27KlarnaOSMStyleConfiguration")
@interface KlarnaOSMStyleConfiguration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class KlarnaTextStyleConfiguration;
SWIFT_CLASS_NAMED("Builder")
@interface KlarnaOSMStyleBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)setBackgroundColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setTextStyleConfiguration:(KlarnaTextStyleConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
- (KlarnaOSMStyleConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end

@class UIViewController;
SWIFT_CLASS("_TtC15KlarnaMobileSDK13KlarnaOSMView")
@interface KlarnaOSMView : UIView
/// View controller (or activity) that will be used to render placement
/// details modally (required). Would be <code>hostActivity</code> on Android.
@property (nonatomic, weak) UIViewController * _Nullable hostViewController;
/// Style configuration for the KlarnaOSMView. When not nil it will take precedence over the Theme values and support for dark mode needs to be implemented.
@property (nonatomic, strong) KlarnaOSMStyleConfiguration * _Nullable styleConfiguration;
/// Initialize OSM view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end

@interface KlarnaOSMView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@protocol KlarnaOSMViewEventListener;
@class NSNumber;
@interface KlarnaOSMView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Merchant’s Client ID (required)
@property (nonatomic, copy) NSString * _Nullable clientId;
/// Merchant’s Placement’s Key (required)
@property (nonatomic, copy) NSString * _Nullable placementKey;
/// Locale for the placement language (required, defaults to en-us).
@property (nonatomic, copy) NSString * _Nonnull locale;
/// Event listener for OSM View.
@property (nonatomic, weak) id <KlarnaOSMViewEventListener> _Nullable delegate SWIFT_DEPRECATED_MSG("Set a KlarnaSizingDelegate on sizingDelegate instead.");
/// Initialize OSM view.
- (nonnull instancetype)init;
/// Initialize OSM view.
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithResourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Initialize OSM view.
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
- (void)setPurchaseAmount:(NSNumber * _Nullable)amount;
/// Renders the content in the view. If already rendered, the view will update (or restyle) its contents
/// instead.
/// warning:
/// To be called only after <code>clientId</code>, <code>placementKey</code>, <code>purchaseAmount</code>,
/// <code>environment</code> and <code>region</code>  properties are set.
/// An error will set in the callback if:
/// <ul>
///   <li>
///     If a property is missing
///   </li>
///   <li>
///     If rendering placements is disabled for you
///   </li>
///   <li>
///     If a property is invalid
///   </li>
/// </ul>
/// \param callback Merchant-supplied callback to be used when placement is
/// rendered or an error occurs. Called on main thread.
///
- (void)renderWithCallback:(void (^ _Nonnull)(KlarnaError * _Nullable))callback;
/// Renders the content in the view. If already rendered, the view will update (or restyle) its contents
/// instead.
/// warning:
/// To be called only after <code>clientId</code>, <code>placementKey</code>, <code>purchaseAmount</code>,
/// <code>environment</code> and <code>region</code>  properties are set.
/// An error will be sent to KlarnaEventHandler if:
/// <ul>
///   <li>
///     If a property is missing
///   </li>
///   <li>
///     If rendering placements is disabled for you
///   </li>
///   <li>
///     If a property is invalid
///   </li>
/// </ul>
- (void)render;
@end

@interface KlarnaOSMView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

/// An object that will be notified of events happening to a <code>KlarnaOSMView</code>
/// If you’re integrating KlarnaOSMView inside a view that needs to specify the content height,
/// you’ll need to implement an instance of this listener.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaOSMViewEventListener_") SWIFT_DEPRECATED_MSG("Implement KlarnaSizingDelegate instead.")
@protocol KlarnaOSMViewEventListener
- (void)klarnaOSMViewResized:(CGFloat)height;
@end

@class KlarnaPaymentView;
@class KlarnaPaymentError;
/// An object that will be notified of events happening to a <code>KlarnaPaymentView</code>
/// If you’re integrating Klarna Payments natively, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaPaymentView</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inPaymentView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaPaymentEventListener_")
@protocol KlarnaPaymentEventListener
/// The <code>initialize()</code> function for this payment view was successful.
/// You can follow up by calling <code>load()</code> to render details for this method, or if this payment
/// method is already authorized, <code>loadPaymentReview()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was initialized.
///
- (void)klarnaInitializedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>load()</code> function for this payment view was successful.
/// Payment view should be visible now. If the user chooses to pay with the payment method in
/// this view, call <code>authorize()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was loaded.
///
- (void)klarnaLoadedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>loadPaymentReview()</code> function for this payment view was successful.
/// Payment view is rendering a description of what the payment method that was authorized.
/// \param paymentView The <code>KlarnaPaymentView</code> that renders a payment review.
///
- (void)klarnaLoadedPaymentReviewWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// An authorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// note:
/// This method being called doesn’t necessarily mean that it was successful. You might need
/// to call <code>finalize()</code>, you might need to correct an error or there might be a fatal error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the authorized payment method.
///
/// \param approved Is the session approved? If true, you should also get an <code>authToken</code>.
///
/// \param authToken Authorization token.
///
/// \param finalizeRequired If true, <code>finalize()</code> needs to be called.
///
- (void)klarnaAuthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken finalizeRequired:(BOOL)finalizeRequired;
/// A reauthorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// If the order is changed after this point. Call the view’s <code>reauthorize()</code> instead
/// of calling <code>authorize()</code> again.
/// note:
/// This method being called doesn’t mean that it was necessarily successful. If <code>klarnaAuthorized()</code>
/// previously returned true for <code>finalizeRequired</code>, you need to still call <code>finalize()</code>. There
/// might also be an error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the reauthorized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaReauthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// The session for the payment method in this view has performed a finalize.
/// If it’s approved and you have an authorization token, you can create an order.
/// note:
/// You need to check for the <code>authToken</code> to make sure the session is finalized.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the finalized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaFinalizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// Called when a Payment View resized internally.
/// Update your constraints (or whatever solution you have) to match the layout.
/// \param paymentView The <code>KlarnaPaymentView</code> that resized.
///
/// \param newHeight The new height in points.
///
- (void)klarnaResizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView to:(CGFloat)newHeight;
/// Called if an error occured during some part of the flow.
/// If the error’s <code>invalidFields</code> property contains field names and the error isn’t fatal, you can:
/// <ol>
///   <li>
///     Prompt the user to get updated info for those fields.
///   </li>
///   <li>
///     Call the same method with those updated fields as additional data.
///   </li>
/// </ol>
/// warning:
/// Errors may or may not be fatal. If the error is fatal the <code>KlarnaPaymentView</code> should not be
/// displayed anymore.
/// \param paymentView The <code>KlarnaPaymentView</code> that the error occured in.
///
/// \param error Error that occurred.
///
- (void)klarnaFailedInPaymentView:(KlarnaPaymentView * _Nonnull)paymentView withError:(KlarnaPaymentError * _Nonnull)error;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK17KlarnaPaymentView")
@interface KlarnaPaymentView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)didMoveToWindow;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
@end

@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initialize the <code>KlarnaPaymentView</code>.
/// \param clientToken Client token received from Klarna when creating the session.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken returnUrl:(NSURL * _Nonnull)returnUrl;
/// Initialize the <code>KlarnaPaymentView</code>.
/// \param clientToken Client token received from Klarna when creating the session.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken;
/// Performs a pre-assessment for this payment method category. Loads content into the
/// <code>KlarnaPaymentView</code>.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// \param jsonData An optional string with order data to update the session. Formatted as JSON.
///
- (void)loadWithJsonData:(NSString * _Nullable)jsonData;
/// Renders an overview of the payment terms that have been authorized.
/// If your checkout offers the customer an opportunity to review the order after the payment
/// step (e.g. an order review page) it can make sense to present the payment method the customer
/// selected on a previous page.
/// This gives the customer a change to review the payment method and its terms to the user.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// note:
///
/// Currently only specific payment methods and countries may be supported.
/// warning:
///
/// The session should be authorized.
- (void)loadPaymentReview;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param autoFinalize An optional flag used to turn off auto-finalization for the direct bank transfer payment method.
///
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithAutoFinalize:(BOOL)autoFinalize jsonData:(NSString * _Nullable)jsonData;
/// Reauthorizes the session.
/// Call this if session details (order or customer info) have changed after authorization.
/// Merchant’s delegate will be called with successful/unsuccessful result of reauthorization.
/// \param jsonData An optional json string to update the session.
///
- (void)reauthorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Finalizes the session.
/// Call this if you called <code>authorize()</code> with <code>autoFinalize</code> set to <code>false</code> and results in
/// <code>finalizeRequired</code> with a <code>true</code> value.
/// Merchant’s delegate will be called with successful/unsuccessful result of finalization.
/// note:
///
/// Method is called <code>finalise</code> with an “s” to avoid conflicts with the <code>NSObject</code> method of
/// the same name.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)finaliseWithJsonData:(NSString * _Nullable)jsonData;
@end

@class KlarnaPaymentOptions;
@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Payment method category this view will be / is displaying.
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Informs whether this <code>KlarnaPaymentView</code> should be displayed to the customer.
/// Will be false until a successful load() call has been performed.
@property (nonatomic, readonly) BOOL isLoaded;
/// Informs whether this PaymentView’s content is loaded.
/// True by default. Once it becomes false, it will not become true again.
@property (nonatomic, readonly) BOOL isAvalable;
/// Options for Klarna Payments integration
@property (nonatomic, readonly, strong) KlarnaPaymentOptions * _Nonnull paymentOptions;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param eventListener A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener object that will receive events from this view.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param eventListener A listener object that will receive events from this view.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param eventListener A listener object that will receive events from this view.
///
/// \param resourceEndpoint Initialises the SDK with an alternative endpoint.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint;
@end

@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK22KlarnaPaymentViewDebug")
@interface KlarnaPaymentViewDebug : KlarnaPaymentView
@end

@class KlarnaPostPurchaseSDK;
@class KlarnaPostPurchaseError;
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK31KlarnaPostPurchaseEventListener_")
@protocol KlarnaPostPurchaseEventListener
- (void)onAuthorizeRequestedWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK;
- (void)onInitializedWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK;
- (void)onRenderedOperationWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK result:(enum KlarnaPostPurchaseRenderResult)result;
- (void)onErrorWithKlarnaPostPurchaseSDK:(KlarnaPostPurchaseSDK * _Nonnull)klarnaPostPurchaseSDK error:(KlarnaPostPurchaseError * _Nonnull)error;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK21KlarnaPostPurchaseSDK")
@interface KlarnaPostPurchaseSDK : NSObject
/// Internal initializer.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Create a Klarna Post Purchase Instance with the specified parameters.
/// Use this method when creating a PostPurchaseSDK object.
/// This method is the designated initializer.
/// \param environment The PostPurchaseSDK specific environment (e.g. staging). For possible values check <code>KlarnaEnvironment</code>
///
/// \param region The PostPurchaseSDK specific region (e.g. EU). For possible values check <code>KlarnaRegion</code>
///
/// \param listener An object that will receive events from this PostPurchaseSDK instance.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region listener:(id <KlarnaPostPurchaseEventListener> _Nonnull)listener;
/// Create a Klarna Post Purchase Instance with the specified parameters.
/// Use this method when creating a PostPurchaseSDK object.
/// This method is the designated initializer.
/// \param environment The PostPurchaseSDK specific environment (e.g. staging). For possible values check <code>KlarnaEnvironment</code>
///
/// \param region The PostPurchaseSDK specific region (e.g. EU). For possible values check <code>KlarnaRegion</code>
///
/// \param resourceEndpoint The PostPurchaseSDK with an alternative endpoint. For possible values check <code>KlarnaResourceEndpoint</code>
///
/// \param listener An object that will receive events from this PostPurchaseSDK instance.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint listener:(id <KlarnaPostPurchaseEventListener> _Nonnull)listener;
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initializes the Post Purchase Instance.
/// After creating the Post Purchase SDK instance this is the next method to call.
/// It will initialize the instance properties and assets required
/// \param locale Localization, list of supported locales can be found in https://docs.klarna.com/in-app/inapp-ios-overview/post-purchase/
///
/// \param purchaseCountry Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
/// \param design Optional design identifier.
///
- (void)initializeWithLocale:(NSString * _Nonnull)locale purchaseCountry:(NSString * _Nonnull)purchaseCountry design:(NSString * _Nullable)design;
/// Authorize the Post Purchase Instance.
/// After receiving the initialized successful callback, the next step is to authorize the user with Klarna to access the Post Purchase information
/// important:
/// Only call this after you get a <em>success</em> callback in the <em>onInitialized</em> delegate method.
/// \param clientId The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param scope The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param redirectUri The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param locale The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param loginHint The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
/// \param responseType The model with attributes needed to authorize the Post Purchase flow, some of it’s attributes are required.
///
- (void)authorizationRequestWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope redirectUri:(NSString * _Nonnull)redirectUri locale:(NSString * _Nullable)locale state:(NSString * _Nullable)state loginHint:(NSString * _Nullable)loginHint responseType:(NSString * _Nullable)responseType;
/// Render the Post Purchase flow.
/// This method causes to launch and load the PostPurchaseSDK view in <em>full screen mode</em>.
/// \param operationToken Token received from Klarna after the auth code exchange
///
/// \param locale Localization, list of supported locales can be found in https://docs.klarna.com/in-app/inapp-ios-overview/post-purchase/
///
/// \param redirectUri Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)renderOperationWithOperationToken:(NSString * _Nonnull)operationToken locale:(NSString * _Nullable)locale redirectUri:(NSString * _Nullable)redirectUri;
@end

@interface KlarnaPostPurchaseSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
/// Replace the listener passed on initialization of the Post Purchase SDK
/// This method replaces the listener passed during initialization of the Post Purchase SDK.
/// The listener must adopt the KlarnaPostPurchaseEventListener protocol. This object is responsible for receiving events with results of the Post Purchase SDK API functions executions.
/// important:
/// There can be one delegate assigned for each Post Purchase SDK instance
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@end

enum KlarnaSignInButtonLogoAlignment : NSInteger;
@protocol ASWebAuthenticationPresentationContextProviding;
@protocol KlarnaSignInTokenizationDelegate;
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaSignInButton") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton : UIControl
/// Defines the theme (or style) of the buttons. For possible options, see <code>KlarnaButtonTheme</code>.
@property (nonatomic) enum KlarnaButtonTheme buttonTheme;
/// Defines the shape of the button. For other values, see <code>KlarnaButtonShape</code>.
@property (nonatomic) enum KlarnaButtonShape buttonShape;
/// Defines the content of the button. For alternatives, see <code>KlarnaButtonLabel</code>.
@property (nonatomic) enum KlarnaButtonLabel buttonLabel;
@property (nonatomic) enum KlarnaSignInButtonLogoAlignment buttonLogoAlignment;
/// Creates a an instance of this button.
/// note:
/// More information about presentation context <a href="https://developer.apple.com/documentation/authenticationservices/aswebauthenticationpresentationcontextproviding">here</a>.
/// note:
/// The view will be initialized with frame <code>.zero</code>, auto layout is the recommended way to
/// manage its layout.
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param theme Defines the theme (or style) of the sign-in components <em>Note: (not the button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Allows the SDK to make requests against an alternative cloud provider. Do not set unless absolutely necessary.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
/// \param loggingLevel Level at which the SDK will log events at.
///
/// \param tokenizationDelegate delegate to inform Merchant app to get the tokenizationId
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext theme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel tokenizationDelegate:(id <KlarnaSignInTokenizationDelegate> _Nullable)tokenizationDelegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaSingleComponent>
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton (SWIFT_EXTENSION(KlarnaMobileSDK))
/// This is the UUID you get when creating your Klarna OAuth 2.0 app.
@property (nonatomic, copy) NSString * _Nullable clientId;
/// Space-separated list of scopes you would like to request from the user.
@property (nonatomic, copy) NSString * _Nullable scope;
/// The market or the country where this integration is available.
@property (nonatomic, copy) NSString * _Nullable market;
/// The language to be presented to the user.
@property (nonatomic, copy) NSString * _Nullable locale;
/// Creates a Klarna Sign-In Button Instance
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a Klarna Sign-In Button Instance
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a Klarna Sign-In Button Instance
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
/// \param theme Defines the theme (or style) of the sign-in components <em>Note: (not the button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext theme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButton (SWIFT_EXTENSION(KlarnaMobileSDK))
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK23KlarnaSignInButtonDebug") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInButtonDebug : KlarnaSignInButton
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nonnull)locale presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext theme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel tokenizationDelegate:(id <KlarnaSignInTokenizationDelegate> _Nullable)tokenizationDelegate OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KlarnaSignInButtonLogoAlignment, open) {
  KlarnaSignInButtonLogoAlignmentLeft = 0,
  KlarnaSignInButtonLogoAlignmentCenter = 1,
};

SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaSignInSDK") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDK : NSObject
/// Creates an instance of KlarnaSignInSDK
/// \param theme Defines the theme (or style) of the sign-in components <em>Note: (not the button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Specifies the environemnt the button should run in. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Defines the regional endpoint requests are made to. For possible values check <code>KlarnaRegion</code>.
///
/// \param resourceEndpoint Allows the SDK to make requests against an alternative cloud provider. Do not set unless absolutely necessary.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
/// \param loggingLevel Level at which the SDK will log events at.
///
- (nonnull instancetype)initWithTheme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel OBJC_DESIGNATED_INITIALIZER;
/// Sign in the user with the supplied parameters.
/// note:
/// More information about presentation context <a href="https://developer.apple.com/documentation/authenticationservices/aswebauthenticationpresentationcontextproviding">here</a>.
/// \param clientId This is the UUID you get when creating your Klarna OAuth 2.0 app.
///
/// \param scope Space-separated list of scopes you would like to request from the user.
///
/// \param market The market or the country where this integration is available.
///
/// \param locale The language to be presented to the user.
///
/// \param tokenizationId The id to enable Tokenization
///
/// \param presentationContext An interface the session uses to ask a delegate for a presentation context.
///
- (void)signInClientId:(NSString * _Nonnull)clientId scope:(NSString * _Nonnull)scope market:(NSString * _Nonnull)market locale:(NSString * _Nullable)locale tokenizationId:(NSString * _Nullable)tokenizationId presentationContext:(id <ASWebAuthenticationPresentationContextProviding> _Nonnull)presentationContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Creates a KlarnaSignInSDK Instance
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a KlarnaSignInSDK Instance
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithEnvironment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
/// Creates a KlarnaSignInSDK Instance
/// \param theme Defines the theme (or style) that web component <em>(Not Klarna Sign-In Button)</em> should use. For possible values check <code>KlarnaTheme</code>.
///
/// \param environment Initialises the SDK with the specified Environment. For possible values check <code>KlarnaEnvironment</code>.
///
/// \param region Initialises the SDK with a specified Region. For possible values check <code>KlarnaRegion</code>.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventHandler An object that will receive events from this KlarnaSignInSDK instance.
///
- (nonnull instancetype)initWithTheme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler;
@end

SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDK (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@end

SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaSignInSDKDebug") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface KlarnaSignInSDKDebug : KlarnaSignInSDK
- (nonnull instancetype)initWithTheme:(enum KlarnaTheme)theme environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region resourceEndpoint:(KlarnaResourceEndpoint * _Nonnull)resourceEndpoint returnUrl:(NSURL * _Nonnull)returnUrl eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler loggingLevel:(enum KlarnaLoggingLevel)loggingLevel OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK32KlarnaSignInTokenizationDelegate_")
@protocol KlarnaSignInTokenizationDelegate
- (void)onTokenization:(id <KlarnaComponent> _Nonnull)klarnaComponent completionHandler:(void (^ _Nonnull)(NSString * _Nonnull))completionHandler;
@end

@protocol KlarnaStandaloneWebViewDelegate;
SWIFT_CLASS("_TtC15KlarnaMobileSDK23KlarnaStandaloneWebView")
@interface KlarnaStandaloneWebView : UIView
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic, strong) id <KlarnaStandaloneWebViewDelegate> _Nullable delegate;
/// Creates a <code>KlarnaStandaloneWebView</code>
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>KlarnaStandaloneWebView</code>
- (nonnull instancetype)initWithReturnURL:(NSURL * _Nonnull)returnURL eventHandler:(id <KlarnaEventHandler> _Nonnull)eventHandler environment:(KlarnaEnvironment * _Nonnull)environment region:(KlarnaRegion * _Nonnull)region OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@interface KlarnaStandaloneWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaMultiComponent>
@property (nonatomic, readonly, strong) KlarnaProductOptions * _Nonnull productOptions;
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull enabledProducts;
- (void)sendEvent:(KlarnaProductEvent * _Nonnull)event;
@end

@interface KlarnaStandaloneWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaStandaloneComponent>
@property (nonatomic, strong) KlarnaRegion * _Nullable region;
@property (nonatomic, strong) KlarnaEnvironment * _Nullable environment;
@property (nonatomic, strong) KlarnaResourceEndpoint * _Nonnull resourceEndpoint;
@property (nonatomic, copy) NSURL * _Nullable returnURL;
@property (nonatomic) enum KlarnaTheme theme;
@property (nonatomic, strong) id <KlarnaEventHandler> _Nullable eventHandler;
@property (nonatomic) enum KlarnaLoggingLevel loggingLevel;
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nonnull products;
@property (nonatomic, readonly) CGFloat contentHeight;
@property (nonatomic, strong) id <KlarnaSizingDelegate> _Nullable sizingDelegate;
@property (nonatomic) BOOL isScrollEnabled;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) CGPoint contentOffset;
@property (nonatomic) enum UIScrollViewContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior SWIFT_AVAILABILITY(ios,introduced=11.0);
@property (nonatomic) enum UIScrollViewKeyboardDismissMode keyboardDismissMode;
@property (nonatomic, strong) UIScrollView * _Nullable parentScrollView;
@property (nonatomic) BOOL adjustsParentScrollViewInsets;
@end

@class WKNavigation;
@class WKFrameInfo;
@class WKUserScript;
@protocol WKScriptMessageHandler;
@class WKContentWorld;
@protocol WKScriptMessageHandlerWithReply;
@interface KlarnaStandaloneWebView (SWIFT_EXTENSION(KlarnaMobileSDK))
- (WKNavigation * _Nullable)loadURLRequest:(NSURLRequest * _Nonnull)request;
- (WKNavigation * _Nullable)loadURL:(NSURL * _Nonnull)url;
- (WKNavigation * _Nullable)loadFileURL:(NSURL * _Nonnull)url allowingReadAccessTo:(NSURL * _Nonnull)readAccessUrl;
- (WKNavigation * _Nullable)loadHTML:(NSString * _Nonnull)htmlString withBaseURL:(NSURL * _Nullable)baseUrl;
- (WKNavigation * _Nullable)reload;
- (WKNavigation * _Nullable)reloadFromOrigin;
- (void)stopLoading;
- (WKNavigation * _Nullable)goBack;
- (WKNavigation * _Nullable)goForward;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) BOOL isLoading;
@property (nonatomic, readonly) BOOL canGoForward;
@property (nonatomic, readonly) BOOL canGoBack;
@property (nonatomic, readonly) CGSize contentSize;
@property (nonatomic) BOOL isInspectable;
@property (nonatomic, strong) UIColor * _Nonnull underPageBackgroundColor SWIFT_AVAILABILITY(ios,introduced=15.0);
@property (nonatomic) BOOL allowsBackForwardAnimationGestures;
@property (nonatomic) BOOL allowsLinkPreview;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, getter=isOpaque) BOOL opaque;
- (void)evaluateJavaScript:(NSString * _Nonnull)javaScript frame:(WKFrameInfo * _Nullable)frame completion:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completion;
- (void)addUserScript:(WKUserScript * _Nonnull)script;
- (void)removeAllUserScripts;
@property (nonatomic, readonly, copy) NSArray<WKUserScript *> * _Nonnull userScripts;
- (void)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler named:(NSString * _Nonnull)name to:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler named:(NSString * _Nonnull)name;
- (void)addScriptMessageHandlerWithReply:(id <WKScriptMessageHandlerWithReply> _Nonnull)scriptMessageHandlerWithReply named:(NSString * _Nonnull)name to:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)removeScriptMessageHandlerWithNamed:(NSString * _Nonnull)name from:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)removeScriptMessageHandlerWithNamed:(NSString * _Nonnull)name;
- (void)removeAllScriptMessageHandlersFrom:(WKContentWorld * _Nonnull)contentWorld SWIFT_AVAILABILITY(ios,introduced=14.0);
- (void)removeAllScriptMessageHandlers;
@property (nonatomic, readonly, copy) NSArray<id <WKScriptMessageHandler>> * _Nonnull scriptMessageHandlers;
@property (nonatomic, readonly, copy) NSArray<id <WKScriptMessageHandlerWithReply>> * _Nonnull scriptMessageHandlersWithReply;
@property (nonatomic) BOOL cachingEnabled;
- (void)clearCache;
- (void)clearCookies;
@end

@class WKNavigationResponse;
@class WKNavigationAction;
@class WKWebViewConfiguration;
@class WKWindowFeatures;
@class WKSecurityOrigin;
/// This is the single delegate that you can implement to observe events in the web view.
/// It’s a combination of <code>WKNavigationDelegate</code> and <code>WKUIDelegate</code>. Its functions behave the
/// same way as the originals, but we cut down on what we expose to only the most important and make
/// naming a bit more consistent.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK31KlarnaStandaloneWebViewDelegate_")
@protocol KlarnaStandaloneWebViewDelegate <NSObject>
@optional
/// Asks the delegate for permission to navigate to new content after the response is known.
/// Use this to allow or deny a request <em>after</em> the web view receives the response to the original
/// URL request. The <code>navigationResponse</code> contains the details of the response, including the
/// type of data it contains.
/// warning:
/// If this function is implemented, the handler needs to be called, even if only with <code>handler(.allow)</code>.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView decidePolicyFor:(WKNavigationResponse * _Nonnull)navigationResponse handler:(SWIFT_NOESCAPE void (^ _Nonnull)(WKNavigationResponsePolicy))handler;
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView decidePolicyFor:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
/// Invoked when a main frame navigation starts.
/// The web view calls this method after it receives provisional approval to process a navigation
/// request, but before it receives a response to that request.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Nonnull)navigation;
/// Invoked when a server redirect is received for the main frame.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didReceiveRedirectForProvisionalNavigation:(WKNavigation * _Nonnull)navigation;
/// Invoked when content starts arriving for the main frame.
/// After the delegate’s <code>klarnaStandaloneWebView(_:decidePolicyFor...</code> method
/// approves the response, the web view begins processing it. The web view calls this method
/// immediately before it starts to update the main frame.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didCommit:(WKNavigation * _Nonnull)navigation;
/// Invoked when a main frame navigation completes.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didFinish:(WKNavigation * _Nonnull)navigation;
/// Invoked when an error occurs while starting to load data for the main frame.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Nonnull)navigation withError:(NSError * _Nonnull)error;
/// Invoked when an error occurs during a committed main frame navigation.
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView didFail:(WKNavigation * _Nonnull)navigation withError:(NSError * _Nonnull)error;
/// Will be called when a navigation requesting a new tab or window occurs in the web view.
/// You can either:
/// <ul>
///   <li>
///     Return a new <code>WKWebView</code>, in which case content will be loaded there (for example if you have an internal browser with a WKWebView that you can use).
///   </li>
///   <li>
///     Return <code>nil</code> and open the URL in <code>navigationAction.request</code> in the system browser - however session data might be lost.
///   </li>
///   <li>
///     Return <code>nil</code> and the navigation will simply be blocked.
///   </li>
/// </ul>
- (WKWebView * _Nullable)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView createWebViewWith:(WKWebViewConfiguration * _Nonnull)configuration forNavigation:(WKNavigationAction * _Nonnull)navigationAction withFeatures:(WKWindowFeatures * _Nonnull)windowFeatures SWIFT_WARN_UNUSED_RESULT;
/// Determines whether a web resource, which the security origin object describes, can access the
/// device’s microphone audio and camera video.
/// warning:
/// Default behavior if this function is not implemented is to call the handler with
/// <code>.prompt</code> (i.e., to prompt the user).
- (void)klarnaStandaloneWebView:(KlarnaStandaloneWebView * _Nonnull)webView requestMediaCapturePermissionFor:(WKSecurityOrigin * _Nonnull)origin initiatedByFrame:(WKFrameInfo * _Nonnull)frame ofType:(WKMediaCaptureType)type handler:(void (^ _Nonnull)(WKPermissionDecision))handler SWIFT_AVAILABILITY(ios,introduced=15.0);
@end

typedef SWIFT_ENUM(NSInteger, KlarnaWebViewOpeningBehavior, open) {
  KlarnaWebViewOpeningBehaviorDelegate = 0,
  KlarnaWebViewOpeningBehaviorIgnore = 1,
  KlarnaWebViewOpeningBehaviorNavigate = 2,
  KlarnaWebViewOpeningBehaviorSystemBrowser = 3,
  KlarnaWebViewOpeningBehaviorInternalBrowser = 4,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
